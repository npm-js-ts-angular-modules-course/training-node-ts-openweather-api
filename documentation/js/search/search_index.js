var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/ApiService.html",[0,0.308,1,1.215]],["body/classes/ApiService.html",[0,0.272,1,1.074,2,1.325,3,0.684,4,0.376,5,1.038,6,1.325,7,1.311,8,1.63,9,2.847,10,2.113,11,1.311,12,0.376,13,2.629,14,2.928,15,2.749,16,1.875,17,2.279,18,1.074,19,2.012,20,2.113,21,1.346,22,1.63,23,1.825,24,3.211,25,1.632,26,1.811,27,2.113,28,1.236,29,2.113,30,1.236,31,2.012,32,1.074,33,0.077,34,1.236,35,1.334,36,1.074,37,2.955,38,2.279,39,1.834,40,1.834,41,1.502,42,1.346,43,1.346,44,1.426,45,1.311,46,2.113,47,2.113,48,3.211,49,1.346,50,1.619,51,1.834,52,2.457,53,2.113,54,1.325,55,3.408,56,1.63,57,1.311,58,1.63,59,2.113,60,1.63,61,2.113,62,1.311,63,2.113,64,1.074,65,1.346,66,1.346,67,1.619,68,1.63,69,1.346,70,1.311,71,1.311,72,1.311,73,1.311,74,1.834,75,1.834,76,1.346,77,1.346,78,1.502,79,0.884,80,0.684,81,1.346,82,1.074,83,1.346,84,1.038,85,0.684,86,0.684,87,0.835,88,1.038,89,1.63,90,1.63,91,1.346,92,1.346,93,1.346,94,1.346,95,1.038,96,0.563,97,0.835,98,1.346,99,1.346,100,0.684,101,1.346,102,1.346,103,0.563,104,0.034,105,0.034]],["title/classes/CitiesService.html",[0,0.308,106,1.484]],["body/classes/CitiesService.html",[0,0.373,2,1.705,3,1.044,4,0.574,6,1.472,12,0.574,13,2.234,18,1.472,23,1.212,26,1.852,28,1.668,30,1.668,31,1.044,32,1.472,33,0.077,34,1.608,35,0.995,36,1.472,41,1.044,44,0.859,78,2.083,79,0.859,85,1.044,96,0.859,103,1.78,104,0.047,105,0.047,106,1.798,107,1.584,108,3.396,109,2.897,110,3.645,111,2.897,112,1.212,113,3.356,114,2.054,115,2.897,116,2.897,117,2.588,118,2.054,119,2.811,120,2.964,121,2.811,122,2.054,123,1.798,124,2.083,125,1.584,126,2.054,127,2.054,128,2.054,129,2.054,130,2.054,131,2.054,132,2.054,133,1.584,134,2.054,135,1.584,136,2.054]],["title/classes/ConfigService.html",[0,0.308,137,1.215]],["body/classes/ConfigService.html",[0,0.288,2,0.735,3,0.735,4,0.404,6,1.784,7,1.388,8,2.37,11,0.898,12,0.404,16,2.132,18,1.136,23,1.623,25,1.136,26,1.784,28,1.285,30,1.143,31,1.562,32,1.388,33,0.078,34,1.143,35,1.056,36,1.972,39,2.18,40,2.18,41,1.562,44,0.935,45,0.898,62,1.907,64,1.136,67,1.388,78,2.108,79,0.935,82,1.136,84,1.116,85,0.735,86,0.735,96,0.605,104,0.036,105,0.036,112,1.531,117,2.37,120,2.917,121,1.724,123,1.388,124,1.388,125,1.116,137,1.136,138,1.116,139,2.236,140,4.096,141,3.073,142,2.236,143,2.236,144,2.236,145,1.447,146,2.732,147,1.447,148,1.388,149,2.732,150,2.236,151,1.447,152,1.388,153,1.447,154,2.236,155,1.447,156,2.236,157,2.236,158,1.447,159,2.236,160,2.236,161,2.236,162,2.236,163,2.236,164,0.898,165,1.447,166,3.073,167,1.447,168,1.447,169,1.447,170,1.116,171,1.447,172,1.447,173,1.447,174,1.447,175,2.236,176,1.447,177,1.447,178,1.447,179,1.447,180,1.447,181,1.447,182,1.447,183,1.447,184,1.447]],["title/classes/CurrentService.html",[0,0.308,80,1.215]],["body/classes/CurrentService.html",[0,0.242,2,0.592,3,0.592,4,0.325,6,1.383,7,1.168,12,0.325,14,1.828,15,1.452,16,0.592,17,1.452,18,0.957,19,2.791,22,0.898,23,1.671,25,0.592,26,1.204,28,1.338,30,0.788,31,1.204,32,1.204,33,0.078,34,0.991,35,0.814,36,1.204,41,1.889,50,2.307,51,2.307,52,2.246,54,1.383,56,1.452,58,1.452,60,1.452,62,1.168,64,1.625,67,1.168,68,1.452,70,1.985,71,1.168,72,1.985,73,1.168,74,1.69,75,1.69,78,1.889,79,1.139,80,0.957,82,0.957,85,0.592,86,0.592,87,0.723,88,2.1,89,0.898,90,0.898,96,1.139,100,2.056,103,1.59,104,0.031,105,0.031,112,0.991,137,0.592,148,2.175,152,1.69,170,0.898,185,0.898,186,1.883,187,1.883,188,1.883,189,1.883,190,1.883,191,1.164,192,1.883,193,1.164,194,2.722,195,1.164,196,2.1,197,1.883,198,1.164,199,1.883,200,2.722,201,2.722,202,1.883,203,1.883,204,1.883,205,1.883,206,1.164,207,1.883,208,1.883,209,1.883,210,1.883,211,1.883,212,1.164,213,1.164,214,1.69,215,1.164,216,2.722,217,1.164,218,1.164,219,1.164,220,1.164,221,2.37,222,1.164,223,1.164,224,1.164,225,2.37,226,1.164,227,1.164,228,1.164,229,2.37,230,2.37,231,1.164,232,1.164,233,1.164]],["title/coverage.html",[234,2.481]],["body/coverage.html",[0,0.547,1,1.536,4,0.845,5,2.331,33,0.074,35,1.038,80,1.536,97,1.876,104,0.061,105,0.061,106,1.876,107,2.331,135,2.331,137,1.536,138,2.331,164,1.876,185,2.331,214,1.876,234,2.331,235,2.331,236,3.022,237,3.022,238,4.249,239,3.022,240,3.022,241,3.022,242,3.022,243,3.022,244,2.331,245,2.323,246,3.022,247,2.331,248,3.022,249,3.022,250,3.022]],["title/dependencies.html",[57,1.777,251,2.02]],["body/dependencies.html",[33,0.071,57,2.236,82,1.831,104,0.068,105,0.068,252,3.603]],["title/miscellaneous/enumerations.html",[253,1.027,254,2.209]],["body/miscellaneous/enumerations.html",[12,0.933,33,0.073,54,2.02,100,2.02,103,1.663,104,0.065,105,0.065,112,1.776,253,1.696,254,2.574,255,3.975,256,3.337,257,3.975,258,3.337]],["title/index.html",[12,0.565,259,1.558,260,1.558]],["body/index.html",[1,1.279,4,0.473,9,3.061,11,1.05,25,0.86,28,0.708,33,0.077,34,0.708,38,1.942,39,1.05,40,1.05,44,0.708,45,1.05,50,1.05,51,1.562,52,2.209,54,0.86,64,1.808,70,1.562,71,1.562,72,1.562,73,1.05,74,2.066,75,2.066,79,1.053,86,0.86,95,1.305,96,1.393,97,1.562,100,0.86,103,0.708,104,0.041,105,0.041,123,1.866,124,1.562,133,2.319,148,1.562,152,1.05,196,1.305,261,2.517,262,1.692,263,2.517,264,1.692,265,1.692,266,1.692,267,1.692,268,1.692,269,1.692,270,1.692,271,1.692,272,1.692,273,1.692,274,1.692,275,1.692,276,1.692,277,1.692,278,2.517,279,1.942,280,2.517,281,1.692,282,1.692,283,1.692,284,1.692,285,1.692,286,1.692,287,1.692,288,1.692,289,1.305,290,1.692,291,2.517,292,1.305,293,1.692,294,1.692,295,1.692,296,1.692,297,1.692,298,1.692,299,1.692,300,3.006,301,3.006,302,3.006,303,3.006,304,3.006,305,1.692,306,1.692,307,1.692,308,1.692,309,3.329,310,3.329,311,3.73,312,2.517,313,1.942,314,3.329,315,2.517,316,2.517,317,3.329,318,2.517,319,2.517,320,3.006,321,2.517,322,3.73,323,2.517,324,2.517,325,1.305,326,2.517,327,1.692,328,1.692,329,1.692,330,1.692,331,1.692,332,1.692,333,1.692,334,1.692,335,2.517,336,2.517,337,1.692,338,1.05,339,1.305]],["title/license.html",[259,1.558,260,1.558,338,1.254]],["body/license.html",[4,0.704,33,0.054,44,1.393,104,0.054,105,0.054,235,1.942,279,1.942,289,1.942,313,2.877,325,1.942,338,1.563,339,1.942,340,3.73,341,2.518,342,2.518,343,2.518,344,2.518,345,2.518,346,3.329,347,2.518,348,2.518,349,2.518,350,2.518,351,3.329,352,2.518,353,3.969,354,4.444,355,2.518,356,3.329,357,3.73,358,2.518,359,3.329,360,2.518,361,2.518,362,2.518,363,2.518,364,2.518,365,2.518,366,2.518,367,2.518,368,2.518,369,2.518,370,2.518,371,2.518,372,2.518,373,3.329,374,3.329,375,2.518,376,2.518,377,2.518,378,3.329,379,2.518,380,2.518,381,2.518,382,2.518,383,2.518,384,2.518,385,2.518,386,2.518,387,2.518,388,2.518,389,2.518,390,2.518,391,2.518,392,2.518,393,2.518,394,2.518,395,2.518,396,2.518,397,2.518,398,2.518,399,2.518,400,2.518,401,2.518]],["title/modules.html",[402,2.481]],["body/modules.html",[33,0.068,104,0.068,105,0.068,402,2.818]],["title/overview.html",[403,2.481]],["body/overview.html",[0,0.466,33,0.068,104,0.068,105,0.068,403,2.792,404,3.62]],["title/miscellaneous/variables.html",[245,1.777,253,1.027]],["body/miscellaneous/variables.html",[12,0.872,16,1.586,23,1.597,30,1.597,33,0.076,35,1.311,87,1.937,104,0.062,105,0.062,108,2.407,112,1.597,119,2.407,164,2.559,214,2.559,244,2.407,245,1.937,247,2.407,253,1.586,292,2.407,405,3.12,406,3.12,407,3.12,408,3.12,409,3.12]],["title/routes.html",[410,2.481]],["body/routes.html",[33,0.068,104,0.068,105,0.068,410,2.818]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":135,"title":{},"body":{"classes/CitiesService.html":{},"coverage.html":{}}}],["0.18.0",{"_index":252,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["08026",{"_index":209,"title":{},"body":{"classes/CurrentService.html":{}}}],["1",{"_index":60,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["1/1",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":238,"title":{},"body":{"coverage.html":{}}}],["115.13982959999998",{"_index":73,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["115.13982959999998}]).then",{"_index":308,"title":{},"body":{"index.html":{}}}],["12.496365500000024",{"_index":203,"title":{},"body":{"classes/CurrentService.html":{}}}],["2018",{"_index":342,"title":{},"body":{"license.html":{}}}],["3",{"_index":273,"title":{},"body":{"index.html":{}}}],["36.1699412",{"_index":71,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["39;89104&#39",{"_index":77,"title":{},"body":{"classes/ApiService.html":{}}}],["39;madrid,es&#39",{"_index":66,"title":{},"body":{"classes/ApiService.html":{}}}],["4",{"_index":404,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":243,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["41.9027835",{"_index":202,"title":{},"body":{"classes/CurrentService.html":{}}}],["48002",{"_index":211,"title":{},"body":{"classes/CurrentService.html":{}}}],["48104",{"_index":208,"title":{},"body":{"classes/CurrentService.html":{}}}],["5",{"_index":271,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["89104",{"_index":95,"title":{},"body":{"classes/ApiService.html":{},"index.html":{}}}],["89104']).then",{"_index":306,"title":{},"body":{"index.html":{}}}],["abov",{"_index":372,"title":{},"body":{"license.html":{}}}],["access_token",{"_index":174,"title":{},"body":{"classes/ConfigService.html":{}}}],["access_token=xxxxx%20xxxxx",{"_index":177,"title":{},"body":{"classes/ConfigService.html":{}}}],["action",{"_index":395,"title":{},"body":{"license.html":{}}}],["add",{"_index":148,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["agent",{"_index":179,"title":{},"body":{"classes/ConfigService.html":{}}}],["and/or",{"_index":366,"title":{},"body":{"license.html":{}}}],["angular",{"_index":325,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular/src/angular",{"_index":329,"title":{},"body":{"index.html":{}}}],["api",{"_index":9,"title":{},"body":{"classes/ApiService.html":{},"index.html":{}}}],["api.getcurrentweather('c",{"_index":298,"title":{},"body":{"index.html":{}}}],["api.getcurrentweather('loc",{"_index":307,"title":{},"body":{"index.html":{}}}],["api.getcurrentweather('zip",{"_index":305,"title":{},"body":{"index.html":{}}}],["api/config.servic",{"_index":212,"title":{},"body":{"classes/CurrentService.html":{}}}],["api_url",{"_index":214,"title":{},"body":{"classes/CurrentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apigener",{"_index":281,"title":{},"body":{"index.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["apiservic",{"_index":1,"title":{"classes/ApiService.html":{}},"body":{"classes/ApiService.html":{},"coverage.html":{},"index.html":{}}}],["apiservice('your_api_key",{"_index":291,"title":{},"body":{"index.html":{}}}],["applic",{"_index":316,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":84,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{}}}],["aris",{"_index":399,"title":{},"body":{"license.html":{}}}],["array",{"_index":48,"title":{},"body":{"classes/ApiService.html":{}}}],["associ",{"_index":355,"title":{},"body":{"license.html":{}}}],["async",{"_index":19,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["author",{"_index":388,"title":{},"body":{"license.html":{}}}],["automat",{"_index":182,"title":{},"body":{"classes/ConfigService.html":{}}}],["avail",{"_index":119,"title":{},"body":{"classes/CitiesService.html":{},"miscellaneous/variables.html":{}}}],["available_lang",{"_index":164,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available_langs.find",{"_index":169,"title":{},"body":{"classes/ConfigService.html":{}}}],["axio",{"_index":82,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"dependencies.html":{}}}],["axios.defaults.headers.get['cont",{"_index":172,"title":{},"body":{"classes/ConfigService.html":{}}}],["axios.defaults.headers.post['cont",{"_index":83,"title":{},"body":{"classes/ApiService.html":{}}}],["axios.get(url).then",{"_index":229,"title":{},"body":{"classes/CurrentService.html":{}}}],["barcelona",{"_index":196,"title":{},"body":{"classes/CurrentService.html":{},"index.html":{}}}],["barcelona,",{"_index":266,"title":{},"body":{"index.html":{}}}],["barcelona,es']).then",{"_index":299,"title":{},"body":{"index.html":{}}}],["basic",{"_index":263,"title":{},"body":{"index.html":{}}}],["bilbao",{"_index":210,"title":{},"body":{"classes/CurrentService.html":{}}}],["bilbao,",{"_index":268,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":117,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["build",{"_index":309,"title":{},"body":{"index.html":{}}}],["c",{"_index":341,"title":{},"body":{"license.html":{}}}],["ca",{"_index":408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catala",{"_index":156,"title":{},"body":{"classes/ConfigService.html":{}}}],["celsiu",{"_index":161,"title":{},"body":{"classes/ConfigService.html":{}}}],["charg",{"_index":350,"title":{},"body":{"license.html":{}}}],["citi",{"_index":103,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["cities_list",{"_index":113,"title":{},"body":{"classes/CitiesService.html":{}}}],["citiesservic",{"_index":106,"title":{"classes/CitiesService.html":{}},"body":{"classes/CitiesService.html":{},"coverage.html":{}}}],["city.nam",{"_index":136,"title":{},"body":{"classes/CitiesService.html":{}}}],["claim",{"_index":391,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"overview.html":{}}}],["cli",{"_index":330,"title":{},"body":{"index.html":{}}}],["client",{"_index":315,"title":{},"body":{"index.html":{}}}],["code",{"_index":152,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["condit",{"_index":371,"title":{},"body":{"license.html":{}}}],["config",{"_index":139,"title":{},"body":{"classes/ConfigService.html":{}}}],["configs/browser.j",{"_index":332,"title":{},"body":{"index.html":{}}}],["configservic",{"_index":137,"title":{"classes/ConfigService.html":{}},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{}}}],["configservice.options(jsonformat",{"_index":228,"title":{},"body":{"classes/CurrentService.html":{}}}],["configservice.setlanguage(lang",{"_index":218,"title":{},"body":{"classes/CurrentService.html":{}}}],["configservice.setunitmetric(unitmetr",{"_index":217,"title":{},"body":{"classes/CurrentService.html":{}}}],["configur",{"_index":317,"title":{},"body":{"index.html":{}}}],["connect",{"_index":401,"title":{},"body":{"license.html":{}}}],["consol",{"_index":304,"title":{},"body":{"index.html":{}}}],["console.error(err",{"_index":302,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":133,"title":{},"body":{"classes/CitiesService.html":{},"index.html":{}}}],["console.log(data",{"_index":300,"title":{},"body":{"index.html":{}}}],["const",{"_index":96,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["constant",{"_index":115,"title":{},"body":{"classes/CitiesService.html":{}}}],["constants/c",{"_index":130,"title":{},"body":{"classes/CitiesService.html":{}}}],["constants/environ",{"_index":215,"title":{},"body":{"classes/CurrentService.html":{}}}],["constants/languag",{"_index":165,"title":{},"body":{"classes/ConfigService.html":{}}}],["construct",{"_index":29,"title":{},"body":{"classes/ApiService.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/ApiService.html":{}}}],["constructor(apikey",{"_index":22,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["contain",{"_index":59,"title":{},"body":{"classes/ApiService.html":{}}}],["contract",{"_index":396,"title":{},"body":{"license.html":{}}}],["coordin",{"_index":200,"title":{},"body":{"classes/CurrentService.html":{}}}],["copi",{"_index":353,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":340,"title":{},"body":{"license.html":{}}}],["countri",{"_index":192,"title":{},"body":{"classes/CurrentService.html":{}}}],["cours",{"_index":343,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":234,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":50,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["current.getbycity(param[0]).then(data",{"_index":102,"title":{},"body":{"classes/ApiService.html":{}}}],["current.getbylocation(param[0]).then(data",{"_index":101,"title":{},"body":{"classes/ApiService.html":{}}}],["current.getbyzip(param[0]).then(data",{"_index":99,"title":{},"body":{"classes/ApiService.html":{}}}],["currentservic",{"_index":80,"title":{"classes/CurrentService.html":{}},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"coverage.html":{}}}],["currentservice(this.apikey",{"_index":98,"title":{},"body":{"classes/ApiService.html":{}}}],["damag",{"_index":392,"title":{},"body":{"license.html":{}}}],["data",{"_index":52,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["data.data",{"_index":230,"title":{},"body":{"classes/CurrentService.html":{}}}],["day",{"_index":272,"title":{},"body":{"index.html":{}}}],["deal",{"_index":356,"title":{},"body":{"license.html":{}}}],["default",{"_index":30,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":26,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["depend",{"_index":57,"title":{"dependencies.html":{}},"body":{"classes/ApiService.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["devkit/build",{"_index":328,"title":{},"body":{"index.html":{}}}],["differ",{"_index":10,"title":{},"body":{"classes/ApiService.html":{}}}],["dist",{"_index":282,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":364,"title":{},"body":{"license.html":{}}}],["document",{"_index":235,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["empti",{"_index":322,"title":{},"body":{"index.html":{}}}],["en",{"_index":87,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":333,"title":{},"body":{"index.html":{}}}],["englishhow",{"_index":297,"title":{},"body":{"index.html":{}}}],["enumer",{"_index":254,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":301,"title":{},"body":{"index.html":{}}}],["error",{"_index":303,"title":{},"body":{"index.html":{}}}],["es",{"_index":292,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["event",{"_index":387,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":64,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["exist",{"_index":128,"title":{},"body":{"classes/CitiesService.html":{}}}],["export",{"_index":85,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["express",{"_index":380,"title":{},"body":{"license.html":{}}}],["extraplugin",{"_index":336,"title":{},"body":{"index.html":{}}}],["fals",{"_index":337,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["files/models/webpack",{"_index":331,"title":{},"body":{"index.html":{}}}],["filter",{"_index":55,"title":{},"body":{"classes/ApiService.html":{}}}],["find",{"_index":56,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["findtyp",{"_index":255,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["findvalu",{"_index":221,"title":{},"body":{"classes/CurrentService.html":{}}}],["first",{"_index":63,"title":{},"body":{"classes/ApiService.html":{}}}],["fit",{"_index":383,"title":{},"body":{"license.html":{}}}],["follow",{"_index":289,"title":{},"body":{"index.html":{},"license.html":{}}}],["forecast",{"_index":269,"title":{},"body":{"index.html":{}}}],["format",{"_index":62,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["fr",{"_index":409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":349,"title":{},"body":{"license.html":{}}}],["fs",{"_index":321,"title":{},"body":{"index.html":{}}}],["function",{"_index":264,"title":{},"body":{"index.html":{}}}],["furnish",{"_index":369,"title":{},"body":{"license.html":{}}}],["get",{"_index":259,"title":{"index.html":{},"license.html":{}},"body":{}}],["getbyc",{"_index":187,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(&#39;barcelona&#39",{"_index":195,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(&#39;madrid,es&#39",{"_index":193,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity('barcelona",{"_index":220,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity('madrid,",{"_index":219,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(c",{"_index":190,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyloc",{"_index":188,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbylocation(loc",{"_index":197,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyzip",{"_index":189,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyzip(zipcod",{"_index":205,"title":{},"body":{"classes/CurrentService.html":{}}}],["getcurrentweath",{"_index":20,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;city&#39",{"_index":65,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;location&#39",{"_index":69,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;zip&#39",{"_index":76,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('c",{"_index":91,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('loc",{"_index":93,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('zip",{"_index":94,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(typ",{"_index":47,"title":{},"body":{"classes/ApiService.html":{}}}],["getlist",{"_index":109,"title":{},"body":{"classes/CitiesService.html":{}}}],["getlist(json",{"_index":116,"title":{},"body":{"classes/CitiesService.html":{}}}],["go",{"_index":326,"title":{},"body":{"index.html":{}}}],["grant",{"_index":348,"title":{},"body":{"license.html":{}}}],["gt",{"_index":67,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["header",{"_index":149,"title":{},"body":{"classes/ConfigService.html":{}}}],["herebi",{"_index":347,"title":{},"body":{"license.html":{}}}],["holder",{"_index":389,"title":{},"body":{"license.html":{}}}],["hour",{"_index":274,"title":{},"body":{"index.html":{}}}],["http",{"_index":181,"title":{},"body":{"classes/ConfigService.html":{}}}],["https://api.openweathermap.org/data/2.5",{"_index":407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifi",{"_index":236,"title":{},"body":{"coverage.html":{}}}],["ignor",{"_index":216,"title":{},"body":{"classes/CurrentService.html":{}}}],["implement",{"_index":277,"title":{},"body":{"index.html":{}}}],["impli",{"_index":381,"title":{},"body":{"license.html":{}}}],["import",{"_index":79,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["includ",{"_index":313,"title":{},"body":{"index.html":{},"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["input",{"_index":58,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["insid",{"_index":314,"title":{},"body":{"index.html":{}}}],["instal",{"_index":278,"title":{},"body":{"index.html":{}}}],["interfaces/location.interfac",{"_index":213,"title":{},"body":{"classes/CurrentService.html":{}}}],["javascript",{"_index":293,"title":{},"body":{"index.html":{}}}],["js",{"_index":344,"title":{},"body":{"license.html":{}}}],["json",{"_index":120,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["json.stringify(this.list['list",{"_index":132,"title":{},"body":{"classes/CitiesService.html":{}}}],["jsonvalu",{"_index":146,"title":{},"body":{"classes/ConfigService.html":{}}}],["kelvin",{"_index":162,"title":{},"body":{"classes/ConfigService.html":{}}}],["key",{"_index":38,"title":{},"body":{"classes/ApiService.html":{},"index.html":{}}}],["kind",{"_index":379,"title":{},"body":{"license.html":{}}}],["la",{"_index":74,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["lang",{"_index":25,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["lang=${languag",{"_index":171,"title":{},"body":{"classes/ConfigService.html":{}}}],["languag",{"_index":16,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["lat",{"_index":70,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["lat=${location.lat}&lon=${location.lon",{"_index":231,"title":{},"body":{"classes/CurrentService.html":{}}}],["liabil",{"_index":393,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":390,"title":{},"body":{"license.html":{}}}],["lib",{"_index":294,"title":{},"body":{"index.html":{}}}],["lib.apiservic",{"_index":296,"title":{},"body":{"index.html":{}}}],["lib/.../environments.t",{"_index":405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../find",{"_index":256,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../languages.t",{"_index":406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/classes/enums/find",{"_index":258,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/classes/services/api/api.service.t",{"_index":5,"title":{},"body":{"classes/ApiService.html":{},"coverage.html":{}}}],["lib/classes/services/api/api.service.ts:12",{"_index":42,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:16",{"_index":43,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:20",{"_index":27,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:41",{"_index":49,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/config.service.t",{"_index":138,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{}}}],["lib/classes/services/api/config.service.ts:12",{"_index":158,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:26",{"_index":151,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:38",{"_index":147,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:46",{"_index":145,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/cities.service.t",{"_index":107,"title":{},"body":{"classes/CitiesService.html":{},"coverage.html":{}}}],["lib/classes/services/cities.service.ts:11",{"_index":118,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:21",{"_index":122,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:34",{"_index":127,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:6",{"_index":114,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/weather/current.service.t",{"_index":185,"title":{},"body":{"classes/CurrentService.html":{},"coverage.html":{}}}],["lib/classes/services/weather/current.service.ts:38",{"_index":191,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:61",{"_index":198,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:77",{"_index":206,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/constants/environments.t",{"_index":244,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/constants/languages.t",{"_index":247,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["librari",{"_index":124,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["licens",{"_index":338,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":359,"title":{},"body":{"license.html":{}}}],["list",{"_index":108,"title":{},"body":{"classes/CitiesService.html":{},"miscellaneous/variables.html":{}}}],["lng",{"_index":72,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["locat",{"_index":100,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["locaton",{"_index":53,"title":{},"body":{"classes/ApiService.html":{}}}],["m",{"_index":86,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["madrid",{"_index":68,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["madrid,",{"_index":92,"title":{},"body":{"classes/ApiService.html":{}}}],["manag",{"_index":8,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{}}}],["match",{"_index":105,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["merchant",{"_index":382,"title":{},"body":{"license.html":{}}}],["merg",{"_index":362,"title":{},"body":{"license.html":{}}}],["method",{"_index":18,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["metr",{"_index":45,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["metric",{"_index":40,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["mill",{"_index":46,"title":{},"body":{"classes/ApiService.html":{}}}],["miscellan",{"_index":253,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":339,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":361,"title":{},"body":{"license.html":{}}}],["modul",{"_index":402,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mugan86/openweath",{"_index":280,"title":{},"body":{"index.html":{}}}],["name",{"_index":34,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["need",{"_index":37,"title":{},"body":{"classes/ApiService.html":{}}}],["net",{"_index":323,"title":{},"body":{"index.html":{}}}],["new",{"_index":97,"title":{},"body":{"classes/ApiService.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":270,"title":{},"body":{"index.html":{}}}],["node",{"_index":320,"title":{},"body":{"index.html":{}}}],["node_modules/@angular",{"_index":327,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":386,"title":{},"body":{"license.html":{}}}],["notic",{"_index":373,"title":{},"body":{"license.html":{}}}],["npm",{"_index":279,"title":{},"body":{"index.html":{},"license.html":{}}}],["null",{"_index":222,"title":{},"body":{"classes/CurrentService.html":{}}}],["number",{"_index":201,"title":{},"body":{"classes/CurrentService.html":{}}}],["object",{"_index":129,"title":{},"body":{"classes/CitiesService.html":{}}}],["obtain",{"_index":352,"title":{},"body":{"license.html":{}}}],["openweath",{"_index":261,"title":{},"body":{"index.html":{}}}],["openweathermap",{"_index":288,"title":{},"body":{"index.html":{}}}],["option",{"_index":36,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["options(jsonvalu",{"_index":144,"title":{},"body":{"classes/ConfigService.html":{}}}],["otherwis",{"_index":398,"title":{},"body":{"license.html":{}}}],["out",{"_index":400,"title":{},"body":{"license.html":{}}}],["overview",{"_index":403,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":251,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":31,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["paramet",{"_index":32,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["paris,fr",{"_index":267,"title":{},"body":{"index.html":{}}}],["pars",{"_index":183,"title":{},"body":{"classes/ConfigService.html":{}}}],["particular",{"_index":384,"title":{},"body":{"license.html":{}}}],["pend",{"_index":276,"title":{},"body":{"index.html":{}}}],["period",{"_index":275,"title":{},"body":{"index.html":{}}}],["permiss",{"_index":346,"title":{},"body":{"license.html":{}}}],["permit",{"_index":368,"title":{},"body":{"license.html":{}}}],["person",{"_index":351,"title":{},"body":{"license.html":{}}}],["place",{"_index":199,"title":{},"body":{"classes/CurrentService.html":{}}}],["plugin",{"_index":335,"title":{},"body":{"index.html":{}}}],["portion",{"_index":376,"title":{},"body":{"license.html":{}}}],["posit",{"_index":61,"title":{},"body":{"classes/ApiService.html":{}}}],["printcitieslist",{"_index":110,"title":{},"body":{"classes/CitiesService.html":{}}}],["privat",{"_index":14,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["project",{"_index":310,"title":{},"body":{"index.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{}}}],["provid",{"_index":377,"title":{},"body":{"license.html":{}}}],["public",{"_index":166,"title":{},"body":{"classes/ConfigService.html":{}}}],["publish",{"_index":363,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":385,"title":{},"body":{"license.html":{}}}],["q=${citi",{"_index":224,"title":{},"body":{"classes/CurrentService.html":{}}}],["q=london,uk",{"_index":223,"title":{},"body":{"classes/CurrentService.html":{}}}],["qs",{"_index":173,"title":{},"body":{"classes/ConfigService.html":{}}}],["regist",{"_index":287,"title":{},"body":{"index.html":{}}}],["replac",{"_index":334,"title":{},"body":{"index.html":{}}}],["request",{"_index":11,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["require('@mugan86/openweath",{"_index":295,"title":{},"body":{"index.html":{}}}],["respons",{"_index":184,"title":{},"body":{"classes/ConfigService.html":{}}}],["restrict",{"_index":358,"title":{},"body":{"license.html":{}}}],["result",{"_index":104,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["return",{"_index":78,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["right",{"_index":360,"title":{},"body":{"license.html":{}}}],["roma",{"_index":204,"title":{},"body":{"classes/CurrentService.html":{}}}],["roma,it",{"_index":265,"title":{},"body":{"index.html":{}}}],["rout",{"_index":410,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":283,"title":{},"body":{"index.html":{}}}],["rx",{"_index":180,"title":{},"body":{"classes/ConfigService.html":{}}}],["rxhr.get(url",{"_index":227,"title":{},"body":{"classes/CurrentService.html":{}}}],["select",{"_index":41,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["selectc",{"_index":111,"title":{},"body":{"classes/CitiesService.html":{}}}],["selectcity(nam",{"_index":126,"title":{},"body":{"classes/CitiesService.html":{}}}],["sell",{"_index":367,"title":{},"body":{"license.html":{}}}],["serv",{"_index":186,"title":{},"body":{"classes/CurrentService.html":{}}}],["servic",{"_index":7,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["setjsonformat",{"_index":141,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguag",{"_index":142,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(&#39;ca&#39",{"_index":155,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(&#39;es&#39",{"_index":153,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage('",{"_index":167,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage('ca",{"_index":168,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(languag",{"_index":150,"title":{},"body":{"classes/ConfigService.html":{}}}],["setunitmetr",{"_index":143,"title":{},"body":{"classes/ConfigService.html":{}}}],["setunitmetric(unit",{"_index":157,"title":{},"body":{"classes/ConfigService.html":{}}}],["shall",{"_index":374,"title":{},"body":{"license.html":{}}}],["show",{"_index":123,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["softwar",{"_index":354,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["spain",{"_index":194,"title":{},"body":{"classes/CurrentService.html":{}}}],["spanish",{"_index":154,"title":{},"body":{"classes/ConfigService.html":{}}}],["standard",{"_index":159,"title":{},"body":{"classes/ConfigService.html":{}}}],["start",{"_index":260,"title":{"index.html":{},"license.html":{}},"body":{}}],["statement",{"_index":237,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":140,"title":{},"body":{"classes/ConfigService.html":{}}}],["string",{"_index":23,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":370,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":365,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":375,"title":{},"body":{"license.html":{}}}],["tabl",{"_index":250,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":28,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["target",{"_index":318,"title":{},"body":{"index.html":{}}}],["temperatur",{"_index":160,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.apikey",{"_index":88,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["this.getlist",{"_index":134,"title":{},"body":{"classes/CitiesService.html":{}}}],["this.languag",{"_index":90,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["this.list['list",{"_index":131,"title":{},"body":{"classes/CitiesService.html":{}}}],["this.unitmetr",{"_index":89,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["tl",{"_index":324,"title":{},"body":{"index.html":{}}}],["tort",{"_index":397,"title":{},"body":{"license.html":{}}}],["true",{"_index":121,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["ts",{"_index":345,"title":{},"body":{"license.html":{}}}],["tsc",{"_index":285,"title":{},"body":{"index.html":{}}}],["type",{"_index":35,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum.t",{"_index":257,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":290,"title":{},"body":{"index.html":{}}}],["undefin",{"_index":170,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["unit",{"_index":39,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["unitmet",{"_index":24,"title":{},"body":{"classes/ApiService.html":{}}}],["unitmetr",{"_index":17,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["units=metr",{"_index":163,"title":{},"body":{"classes/ConfigService.html":{}}}],["uri",{"_index":176,"title":{},"body":{"classes/ConfigService.html":{}}}],["url",{"_index":225,"title":{},"body":{"classes/CurrentService.html":{}}}],["us",{"_index":44,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":178,"title":{},"body":{"classes/ConfigService.html":{}}}],["valu",{"_index":112,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":245,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["vega",{"_index":75,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["void",{"_index":125,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["want",{"_index":312,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":378,"title":{},"body":{"license.html":{}}}],["watchor",{"_index":284,"title":{},"body":{"index.html":{}}}],["weather",{"_index":51,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["weather/current.servic",{"_index":81,"title":{},"body":{"classes/ApiService.html":{}}}],["weather?${findvalue}${this.unitmetric}${this.language}&appid",{"_index":226,"title":{},"body":{"classes/CurrentService.html":{}}}],["weather?${value}${this.unitmetric}${this.language}&appid",{"_index":232,"title":{},"body":{"classes/CurrentService.html":{}}}],["weather?zip=${zipcode}${this.unitmetric}${this.language}&appid",{"_index":233,"title":{},"body":{"classes/CurrentService.html":{}}}],["web",{"_index":319,"title":{},"body":{"index.html":{}}}],["webpack",{"_index":311,"title":{},"body":{"index.html":{}}}],["whether",{"_index":394,"title":{},"body":{"license.html":{}}}],["without",{"_index":357,"title":{},"body":{"license.html":{}}}],["work",{"_index":262,"title":{},"body":{"index.html":{}}}],["wusag",{"_index":286,"title":{},"body":{"index.html":{}}}],["xxxxx",{"_index":175,"title":{},"body":{"classes/ConfigService.html":{}}}],["zip",{"_index":54,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["zipcod",{"_index":207,"title":{},"body":{"classes/CurrentService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiService.html":{"url":"classes/ApiService.html","title":"class - ApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/api/api.service.ts\n        \n\n            \n                Description\n            \n            \n                Service that manage API differents requests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiKey\n                            \n                            \n                                    Private\n                                language\n                            \n                            \n                                    Private\n                                unitMetric\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCurrentWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apiKey: string, unitMet: string, lang: string)\n                    \n                \n                        \n                            \n                                Defined in lib/classes/services/api/api.service.ts:20\n                            \n                        \n\n                \n                    \n                            Take construct default properties by params\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Need Api Key\n\n                                                        \n                                                \n                                                \n                                                        unitMet\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Default unit metric\n\n                                                        \n                                                \n                                                \n                                                        lang\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Select language\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            apiKey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        apiKey:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:12\n                            \n                        \n\n                \n                    \n                        Need Api Key to take API info\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            language\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        language:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:20\n                            \n                        \n\n                \n                    \n                        select language\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unitMetric\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unitMetric:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:16\n                            \n                        \n\n                \n                    \n                        Property to define use unit metric, metres or milles\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getCurrentWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCurrentWeather(type: string, param: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:41\n                            \n                        \n\n\n                \n                    \n                            Get current weather data using name, locaton or zip filters.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Filter to use to find weather dependent input data\n\n                                                        \n                                                \n                                                \n                                                        param\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                array with contain 1 position data in any format. In first filter data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            getCurrentWeather(&#39;city&#39;, [&#39;Madrid,es&#39;]) -&gt; Madrid\ngetCurrentWeather(&#39;location&#39;, [{lat: 36.1699412, lng: -115.13982959999998}]) -&gt; Las Vegas\ngetCurrentWeather(&#39;zip&#39;, [&#39;89104&#39;]) -&gt; Las Vegas\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { CurrentService } from './../weather/current.service';\nimport axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\n/**\n * Service that manage API differents requests\n */\nexport class ApiService {\n    /**\n     * Need Api Key to take API info\n     */\n    private apiKey: string;\n    /**\n     * Property to define use unit metric, metres or milles\n     */\n    private unitMetric: string;\n    /**\n     * select language\n     */\n    private language: string;\n    /**\n     * Take construct default properties by params\n     * @param apiKey Need Api Key\n     * @param unitMet Default unit metric\n     * @param lang Select language\n     */\n    constructor(apiKey: string, unitMet: string = 'm', lang: string = 'en') {\n        this.apiKey = apiKey;\n        this.unitMetric = unitMet;\n        this.language = lang;\n    }\n    /**\n     * Get current weather data using name, locaton or zip filters.\n     * @example\n     * getCurrentWeather('city', ['Madrid,es']) -> Madrid\n     * getCurrentWeather('location', [{lat: 36.1699412, lng: -115.13982959999998}]) -> Las Vegas\n     * getCurrentWeather('zip', ['89104']) -> Las Vegas\n     * @param type Filter to use to find weather dependent input data\n     * @param param array with contain 1 position data in any format. In first filter data\n     */\n    async getCurrentWeather(type: string, param: Array) {\n        const current = new CurrentService(this.apiKey, this.unitMetric, this.language);\n        if (type === 'zip') {\n            return current.getByZip(param[0]).then(data => data);\n        } else if (type === 'location') {\n            return current.getByLocation(param[0]).then(data => data);\n        } \n        return current.getByCity(param[0]).then(data => data); // by city\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesService.html":{"url":"classes/CitiesService.html","title":"class - CitiesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/cities.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                printCitiesList\n                            \n                            \n                                selectCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            list\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        list:     \n\n                    \n                \n                    \n                        \n                            Default value : CITIES_LIST\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:6\n                            \n                        \n\n                \n                    \n                        Take cities list from constants\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(json: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:11\n                            \n                        \n\n\n                \n                    \n                            Take available cities list\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        json\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                true\n                                                        \n\n                                                        \n                                                                Return in JSON or no. Default \"true\"\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            printCitiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \nprintCitiesList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:21\n                            \n                        \n\n\n                \n                    \n                            Show cities list available in library by default\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectCity(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:34\n                            \n                        \n\n\n                \n                    \n                            Use exist List in library to take select city object info\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Name of city to take all info\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { CITIES_LIST } from './../../constants/cities-list';\nexport class CitiesService {\n    /**\n     * Take cities list from constants\n     */\n    list = CITIES_LIST;\n    /**\n     * Take available cities list\n     * @param json Return in JSON or no. Default \"true\"\n     */\n    getList(json: boolean = true) {\n        if (json) {\n            return this.list['list'];\n        }\n        return JSON.stringify(this.list['list']);\n    }\n\n    /**\n     * Show cities list available in library by default\n     */\n    printCitiesList() {\n        console.log('********************************');\n        const cities = this.getList();\n        for (let i = 0; i  city.name === name );\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/api/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Service to manage library config values\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                options\n                            \n                            \n                                    Static\n                                setJsonFormat\n                            \n                            \n                                    Static\n                                setLanguage\n                            \n                            \n                                    Static\n                                setUnitMetric\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            options\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        options(jsonValue: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:46\n                            \n                        \n\n\n                \n                    \n                            Take options\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jsonValue\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                true\n                                                        \n\n                                                        \n                                                                take JSON format or no\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     { json: boolean; }\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setJsonFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setJsonFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:38\n                            \n                        \n\n\n                \n                    \n                            Add headers in JSON Format\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setLanguage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setLanguage(language: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:26\n                            \n                        \n\n\n                \n                    \n                            Define default language use to show description in select language\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        language\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Select language code.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            setLanguage(&#39;es&#39;)--&gt; Spanish language\nsetLanguage(&#39;ca&#39;)--&gt; Catala language\n                                        \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setUnitMetric\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setUnitMetric(unit: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:12\n                            \n                        \n\n\n                \n                    \n                            Manage to return metric or standard metric values\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Metric unit to return value in temperature with celsius or kelvin\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     \"&units=metric\" | \"\"\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AVAILABLE_LANGS } from './../../../constants/languages';\nimport axios from 'axios';\n\n/**\n * Service to manage library config values\n */\nexport class ConfigService {\n    /**\n     * Manage to return metric or standard metric values\n     * @param unit Metric unit to return value in temperature with celsius or kelvin\n     */\n    public static setUnitMetric(unit: string) {\n        if (unit === 'm' || unit === 'metres') {\n            return `&units=metric`;\n        }\n        return ``;\n    }\n\n    /**\n     * Define default language use to show description in select language\n     * @example\n     * setLanguage('es')--> Spanish language\n     * setLanguage('ca')--> Catala language\n     * @param language { string } Select language code.\n     */\n    public static setLanguage(language: string) {\n        \n        if (language === '' || AVAILABLE_LANGS.find( (lang: any) => lang === language ) === undefined) {\n            return ``;\n        }\n        return `&lang=${language}`;\n    }\n\n    /**\n     * Add headers in JSON Format\n     * @param json \n     */\n    public static setJsonFormat() {\n        axios.defaults.headers.get['Content-Type'] = 'application/json';\n    }\n\n    /**\n     * Take options\n     * @param jsonValue take JSON format or no\n     */\n    public static options(jsonValue: boolean = true) {\n        /*\n        qs: {\n                access_token: 'xxxxx xxxxx' // -> uri + '?access_token=xxxxx%20xxxxx'\n            },\n        headers: {\n                'User-Agent': 'Rx-Http-Request'\n            },*/\n        const options = {\n            json: jsonValue // Automatically parses the JSON string in the response\n        };\n        return options;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CurrentService.html":{"url":"classes/CurrentService.html","title":"class - CurrentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CurrentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/weather/current.service.ts\n        \n\n            \n                Description\n            \n            \n                Current Weather serve service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getByCity\n                            \n                            \n                                    Async\n                                getByLocation\n                            \n                            \n                                    Async\n                                getByZip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByCity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByCity(city: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:38\n                            \n                        \n\n\n                \n                    \n                            Take current weather of select city and country.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ''\n                                                        \n\n                                                        \n                                                                add select city.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            getByCity(&#39;Madrid,es&#39;) --&gt; Madrid (Spain) current weather Data.\ngetByCity(&#39;Barcelona&#39;) --&gt; Find Barcelona (Spain)\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByLocation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByLocation(location: Location)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:61\n                            \n                        \n\n\n                \n                    \n                            Take current weather data in select place to add coordinates\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                        \n                                                                    Location\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Add location coordinates in {lat: number, lng: number } format\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            location = {lat: 36.1699412, lng: -115.13982959999998} - Las Vegas\nlocation = {lat: 41.9027835, lng: 12.496365500000024} - Roma\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByZip\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByZip(zipCode: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:77\n                            \n                        \n\n\n                \n                    \n                            Input select city zip code to take this select weather current data.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        zipCode\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \"-1\"\n                                                        \n\n                                                        \n                                                                location zip code add. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            Las Vegas = 48104\nBarcelona = 08026\nBilbao = 48002\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from './../api/config.service';\nimport { Location } from './../../interfaces/location.interface';\nimport { API_URL } from '../../../constants/environments';\nimport axios from 'axios';\n\n/**\n * Current Weather serve service\n */\nexport class CurrentService {\n    /**\n     * @ignore\n     */\n    private apiKey: string;\n    /**\n     * @ignore\n     */\n    private unitMetric: string;\n    /**\n     * @ignore\n     */\n    private language: string;\n    /**\n     * @ignore\n     */\n    constructor(apiKey: string, unitMetric: string = 'm', lang: string = 'en') {\n        this.apiKey = apiKey;\n        this.unitMetric = ConfigService.setUnitMetric(unitMetric);\n        this.language = ConfigService.setLanguage(lang);\n    }\n    \n    /**\n    * Take current weather of select city and country.\n    * @example\n    * getByCity('Madrid,es') --> Madrid (Spain) current weather Data.\n    * getByCity('Barcelona') --> Find Barcelona (Spain)\n    * @param city { string} add select city.\n    */\n    async getByCity(city: string = '') {\n        \n        let findValue = '';\n        if (city === null || city === undefined || city === '') {\n            findValue = 'q=London,uk';\n        } else {\n            findValue = `q=${city}`;\n        }\n        const URL = `${API_URL }weather?${findValue}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        // return RxHR.get(URL, ConfigService.options(jsonFormat));\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n                                            \n    }\n\n    /**\n     * Take current weather data in select place to add coordinates\n     * @example \n     * location = {lat: 36.1699412, lng: -115.13982959999998} - Las Vegas\n     * location = {lat: 41.9027835, lng: 12.496365500000024} - Roma\n     * @param location {Location} Add location coordinates in {lat: number, lng: number } format\n     */\n    async getByLocation(location: Location) {\n        const value = `lat=${location.lat}&lon=${location.lon}`;\n        const URL = `${API_URL }weather?${value}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n    }\n\n    /**\n     * Input select city zip code to take this select weather current data.\n     * @example\n     * Las Vegas = 48104\n     * Barcelona = 08026\n     * Bilbao = 48002\n     * @param zipCode { string } location zip code add. \n     */\n    async getByZip(zipCode: string = \"-1\") {\n        const URL = `${API_URL }weather?zip=${zipCode}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/classes/services/api/api.service.ts\n            \n            \n                class\n            \n            \n                ApiService\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/classes/services/api/config.service.ts\n            \n            \n                class\n            \n            \n                ConfigService\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/classes/services/cities.service.ts\n            \n            \n                class\n            \n            \n                CitiesService\n            \n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/classes/services/weather/current.service.ts\n            \n            \n                class\n            \n            \n                CurrentService\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/constants/environments.ts\n            \n            \n                variable\n            \n            \n                API_URL\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/constants/languages.ts\n            \n            \n                variable\n            \n            \n                AVAILABLE_LANGS\n            \n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            axios : ^0.18.0\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FindType   (lib/.../find-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/classes/enums/find-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FindType\n                    \n                \n                        \n                            \n                                 City\n                            \n                        \n                        \n                            \n                                Value : city\n                            \n                        \n                        \n                            \n                                 Location\n                            \n                        \n                        \n                            \n                                Value : location\n                            \n                        \n                        \n                            \n                                 Zip\n                            \n                        \n                        \n                            \n                                Value : zip\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOpenweather API (in working)\n \n\n\n\nAPI Openweather with basic request.\nFunctions\nCurrent Weather data.\n\nBy city name: Examples = ('Roma,it', 'Barcelona,es', 'Paris,fr', 'Bilbao,es' ,...)\nBy location: Example: {lat: 36.1699412, lng: -115.13982959999998} = Las Vegas\nBy zip code: Example: 89104 - Las Vegas\n\nForecast Weather data (Next 5 days in 3 hours period)\n\nPending to implement\n\nInstallation.\nnpm install @mugan86/openweather-apiGenerate DIST\nnpm run watchor\ntsc -wUsage\n\nRegister in Openweathermap.\nTake API key from: API Keys\nFollow this example. Basic example.\n\nImports\nTypescript\nimport { ApiService } from '@mugan86/openweather-api';\n\nconst api = new ApiService('YOUR_API_KEY', 'm', 'es');\nJavascript\nconst lib = require('@mugan86/openweather-api');\nconst apiService = lib.ApiService;\n\nconst api = new apiService('YOUR_API_KEY'); // unit metric = metres / lang = englishHow to use\napi.getCurrentWeather('city', ['Barcelona,es']).then(\n    (data) => {\n        console.log('***************** BARCELONA *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);\n\napi.getCurrentWeather('zip', ['89104']).then(\n    (data) => { \n        console.log('***************** LAS VEGAS *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);\n\napi.getCurrentWeather('location', [{lat: 36.1699412, lng: -115.13982959999998}]).then(\n    (data) => { \n        console.log('***************** LAS VEGAS *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);Build your project with Webpack\nIf you want to include this library inside a project builds with webpack for a client application, you must add this configuration inside your webpack configuration:\n{\n    target: \"web\",\n    node: {\n        fs: \"empty\",\n        net: \"empty\",\n        tls: \"empty\"\n    }\n}Build your project with Webpack in Angular\nIf you want to include this library inside a project builds with webpack for a client application, you must add this configuration inside your webpack configuration. Go to node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs/browser.js\nGo to file end and replace:\n{\n    plugins: extraPlugins,\n    node: false\n}with \n{\n    plugins: extraPlugins,\n    target: \"web\",\n    node: {\n        fs: \"empty\",\n        net: \"empty\",\n        tls: \"empty\"\n    }\n}License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Npm Course: JS, TS and Angular\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (lib/.../environments.ts)\n                        \n                        \n                            AVAILABLE_LANGS   (lib/.../languages.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/constants/environments.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            API_URL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        API_URL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'https://api.openweathermap.org/data/2.5/'\n                        \n                    \n\n\n            \n        \n\n    lib/constants/languages.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AVAILABLE_LANGS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        AVAILABLE_LANGS:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'en', 'es', 'ca', 'it', 'fr'\n]\n                        \n                    \n\n                \n                    \n                        List with available languages\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
