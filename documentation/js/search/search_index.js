var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/ApiService.html",[0,0.23,1,1.141]],["body/classes/ApiService.html",[0,0.211,1,1.046,2,1.282,3,0.674,4,0.349,5,1.047,6,1.282,7,1.294,8,1.294,9,2.207,10,2.129,11,1.294,12,0.349,13,2.571,14,2.848,15,2.683,16,1.784,17,2.245,18,1.046,19,1.992,20,2.129,21,1.372,22,1.625,23,1.694,24,3.183,25,1.564,26,1.726,27,2.129,28,1.171,29,2.129,30,1.171,31,1.907,32,1.046,33,0.083,34,1.171,35,1.224,36,1.046,37,2.94,38,2.245,39,1.787,40,1.787,41,1.444,42,1.372,43,1.372,44,1.342,45,1.294,46,2.129,47,2.129,48,3.183,49,1.372,50,1.585,51,1.787,52,2.359,53,2.129,54,1.282,55,3.368,56,1.625,57,1.294,58,1.625,59,2.129,60,1.625,61,2.129,62,1.294,63,2.129,64,1.046,65,1.372,66,1.372,67,1.585,68,1.625,69,1.372,70,1.294,71,1.294,72,1.294,73,1.294,74,1.787,75,1.787,76,1.372,77,1.372,78,1.444,79,0.848,80,0.674,81,1.372,82,1.046,83,1.372,84,1.047,85,0.674,86,0.674,87,0.833,88,1.047,89,1.625,90,1.625,91,1.372,92,1.372,93,1.372,94,1.372,95,1.047,96,0.546,97,0.833,98,1.372,99,1.372,100,0.674,101,1.372,102,1.372,103,0.546,104,0.039,105,0.039]],["title/classes/CitiesService.html",[0,0.23,106,1.412]],["body/classes/CitiesService.html",[0,0.279,2,1.834,3,0.987,4,0.512,6,1.604,8,1.716,12,0.512,13,2.156,18,1.388,23,1.125,26,1.74,28,1.542,30,1.542,31,0.987,32,1.388,33,0.083,34,1.487,35,0.907,36,1.388,41,0.987,44,0.8,78,1.953,79,0.8,85,0.987,96,0.8,103,1.684,104,0.051,105,0.051,106,1.716,107,1.534,108,3.257,109,2.824,110,3.543,111,2.824,112,1.125,113,3.266,114,2.01,115,2.824,116,2.824,117,2.493,118,2.01,119,2.705,120,2.85,121,2.705,122,2.01,123,1.716,124,1.984,125,1.534,126,2.01,127,2.01,128,2.01,129,2.01,130,2.01,131,2.01,132,2.01,133,1.534,134,2.01,135,2.01,136,2.01]],["title/classes/ConfigService.html",[0,0.23,137,1.141]],["body/classes/ConfigService.html",[0,0.222,2,0.723,3,0.723,4,0.375,6,1.702,7,1.365,8,1.854,11,0.894,12,0.375,16,2.013,18,1.104,23,1.517,25,1.104,26,1.702,28,1.215,30,1.086,31,1.499,32,1.339,33,0.084,34,1.086,35,0.979,36,1.871,39,2.105,40,2.105,41,1.499,44,0.895,45,0.894,62,1.854,64,1.104,67,1.365,78,1.992,79,0.895,82,1.104,84,1.123,85,0.723,86,0.723,96,0.586,104,0.041,105,0.041,112,1.435,117,2.329,120,2.837,121,1.716,123,1.365,124,1.365,125,1.123,137,1.104,138,1.123,139,2.247,140,4.007,141,3.051,142,2.247,143,2.247,144,2.247,145,1.472,146,2.726,147,1.472,148,1.365,149,2.726,150,2.247,151,1.472,152,1.365,153,1.472,154,2.247,155,1.472,156,2.247,157,2.247,158,1.472,159,2.247,160,2.247,161,2.247,162,2.247,163,2.247,164,0.894,165,1.472,166,3.051,167,1.472,168,1.472,169,1.472,170,1.123,171,1.472,172,1.472,173,1.472,174,1.472,175,2.247,176,1.472,177,1.472,178,1.472,179,1.472,180,1.472,181,1.472,182,1.472,183,1.472,184,1.472]],["title/classes/CurrentService.html",[0,0.23,80,1.141]],["body/classes/CurrentService.html",[0,0.188,2,0.585,3,0.585,4,0.304,6,1.336,7,1.158,12,0.304,14,1.818,15,1.455,16,0.585,17,1.455,18,0.936,19,2.723,22,0.91,23,1.56,25,0.585,26,1.17,28,1.263,30,0.759,31,1.17,32,1.17,33,0.084,34,0.948,35,0.764,36,1.17,41,1.797,50,2.223,51,2.223,52,2.167,54,1.336,56,1.455,58,1.455,60,1.455,62,1.158,64,1.558,67,1.158,68,1.455,70,1.927,71,1.158,72,1.927,73,1.158,74,1.653,75,1.653,78,1.797,79,1.083,80,0.936,82,0.936,85,0.585,86,0.585,87,0.724,88,2.077,89,0.91,90,0.91,96,1.083,100,1.946,103,1.488,104,0.035,105,0.035,112,0.948,137,0.585,148,2.102,152,1.653,170,0.91,185,0.91,186,1.905,187,1.905,188,1.905,189,1.905,190,1.905,191,1.192,192,1.905,193,1.192,194,2.72,195,1.192,196,2.077,197,1.905,198,1.192,199,1.905,200,2.72,201,2.72,202,1.905,203,1.905,204,1.905,205,1.905,206,1.192,207,1.905,208,1.905,209,1.905,210,1.905,211,1.905,212,1.192,213,1.192,214,1.653,215,1.192,216,2.72,217,1.192,218,1.192,219,1.192,220,1.192,221,2.381,222,1.192,223,1.192,224,1.192,225,1.818,226,1.192,227,1.192,228,1.192,229,2.381,230,2.381,231,1.192,232,1.192,233,1.192]],["title/coverage.html",[234,2.382]],["body/coverage.html",[0,0.409,1,1.459,4,0.756,5,2.267,33,0.08,35,0.953,80,1.459,97,1.804,104,0.066,105,0.066,106,1.804,107,2.267,137,1.459,138,2.267,164,1.804,185,2.267,214,1.804,234,2.267,235,2.267,236,2.97,237,2.97,238,4.319,239,2.97,240,3.655,241,2.97,242,2.267,243,2.221,244,3.655,245,2.267,246,2.97,247,2.97]],["title/dependencies.html",[57,1.69,248,1.965]],["body/dependencies.html",[33,0.077,57,2.125,82,1.718,104,0.073,105,0.073,249,3.496]],["title/miscellaneous/enumerations.html",[250,0.966,251,2.123]],["body/miscellaneous/enumerations.html",[12,0.83,33,0.079,54,1.898,100,1.898,103,1.539,104,0.07,105,0.07,112,1.641,250,1.6,251,2.486,252,3.864,253,3.257,254,3.864,255,3.257]],["title/index.html",[12,0.501,256,1.5,257,1.5]],["body/index.html",[1,1.236,4,0.436,9,2.362,11,1.04,25,0.841,28,0.682,33,0.083,34,0.682,38,1.921,39,1.04,40,1.04,44,0.682,45,1.04,50,1.04,51,1.529,52,2.13,54,0.841,64,1.722,70,1.529,71,1.529,72,1.529,73,1.04,74,1.999,75,1.999,79,1.002,86,0.841,95,1.307,96,1.311,97,1.529,100,0.841,103,0.682,104,0.046,105,0.046,123,1.813,124,1.529,133,2.278,148,1.529,152,1.04,196,1.307,258,2.517,259,1.712,260,2.517,261,1.712,262,1.712,263,1.712,264,1.712,265,1.712,266,1.712,267,1.712,268,1.712,269,1.712,270,1.712,271,1.712,272,1.712,273,1.712,274,1.712,275,2.517,276,1.921,277,2.517,278,1.712,279,1.712,280,1.712,281,1.712,282,1.712,283,1.712,284,1.712,285,1.712,286,1.307,287,1.712,288,2.517,289,1.307,290,1.712,291,1.712,292,1.712,293,1.712,294,1.712,295,1.712,296,1.712,297,2.984,298,2.984,299,2.984,300,2.984,301,2.984,302,1.712,303,1.712,304,1.712,305,1.712,306,3.29,307,3.29,308,3.666,309,2.517,310,1.921,311,3.29,312,2.517,313,2.517,314,3.29,315,2.517,316,2.517,317,2.984,318,2.517,319,3.666,320,2.517,321,2.517,322,1.307,323,2.517,324,1.712,325,1.712,326,1.712,327,1.712,328,1.712,329,1.712,330,1.712,331,1.712,332,2.517,333,2.517,334,1.712,335,1.04,336,1.307]],["title/license.html",[256,1.5,257,1.5,335,1.194]],["body/license.html",[4,0.637,33,0.06,44,1.305,104,0.06,105,0.06,235,1.909,276,1.909,286,1.909,310,2.79,322,1.909,335,1.52,336,1.909,337,3.655,338,2.501,339,2.501,340,2.501,341,2.501,342,2.501,343,3.277,344,2.501,345,2.501,346,2.501,347,2.501,348,3.277,349,2.501,350,3.879,351,4.319,352,2.501,353,3.277,354,3.655,355,2.501,356,3.277,357,2.501,358,2.501,359,2.501,360,2.501,361,2.501,362,2.501,363,2.501,364,2.501,365,2.501,366,2.501,367,2.501,368,2.501,369,2.501,370,3.277,371,3.277,372,2.501,373,2.501,374,2.501,375,3.277,376,2.501,377,2.501,378,2.501,379,2.501,380,2.501,381,2.501,382,2.501,383,2.501,384,2.501,385,2.501,386,2.501,387,2.501,388,2.501,389,2.501,390,2.501,391,2.501,392,2.501,393,2.501,394,2.501,395,2.501,396,2.501,397,2.501,398,2.501]],["title/modules.html",[399,2.382]],["body/modules.html",[33,0.074,104,0.074,105,0.074,399,2.704]],["title/overview.html",[400,2.382]],["body/overview.html",[0,0.347,33,0.073,104,0.073,105,0.073,400,2.681,401,3.512]],["title/miscellaneous/variables.html",[243,1.69,250,0.966]],["body/miscellaneous/variables.html",[9,1.838,12,0.771,16,1.486,23,1.472,30,1.59,33,0.082,35,1.187,87,1.838,104,0.067,105,0.067,108,2.31,112,1.472,119,2.31,164,2.426,214,2.426,225,2.31,242,2.31,243,1.838,245,2.31,250,1.486,289,2.31,402,3.025,403,3.025,404,3.025,405,3.025,406,3.025]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":135,"title":{},"body":{"classes/CitiesService.html":{}}}],["0.18.0",{"_index":249,"title":{},"body":{"dependencies.html":{}}}],["08026",{"_index":209,"title":{},"body":{"classes/CurrentService.html":{}}}],["1",{"_index":60,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["1/1",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":238,"title":{},"body":{"coverage.html":{}}}],["115.13982959999998",{"_index":73,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["115.13982959999998}]).then",{"_index":305,"title":{},"body":{"index.html":{}}}],["12.496365500000024",{"_index":203,"title":{},"body":{"classes/CurrentService.html":{}}}],["2018",{"_index":339,"title":{},"body":{"license.html":{}}}],["3",{"_index":270,"title":{},"body":{"index.html":{}}}],["36.1699412",{"_index":71,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["39;89104&#39",{"_index":77,"title":{},"body":{"classes/ApiService.html":{}}}],["39;madrid,es&#39",{"_index":66,"title":{},"body":{"classes/ApiService.html":{}}}],["4",{"_index":401,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["41.9027835",{"_index":202,"title":{},"body":{"classes/CurrentService.html":{}}}],["48002",{"_index":211,"title":{},"body":{"classes/CurrentService.html":{}}}],["48104",{"_index":208,"title":{},"body":{"classes/CurrentService.html":{}}}],["5",{"_index":268,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["89104",{"_index":95,"title":{},"body":{"classes/ApiService.html":{},"index.html":{}}}],["89104']).then",{"_index":303,"title":{},"body":{"index.html":{}}}],["abov",{"_index":369,"title":{},"body":{"license.html":{}}}],["access_token",{"_index":174,"title":{},"body":{"classes/ConfigService.html":{}}}],["access_token=xxxxx%20xxxxx",{"_index":177,"title":{},"body":{"classes/ConfigService.html":{}}}],["action",{"_index":392,"title":{},"body":{"license.html":{}}}],["add",{"_index":148,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["agent",{"_index":179,"title":{},"body":{"classes/ConfigService.html":{}}}],["and/or",{"_index":363,"title":{},"body":{"license.html":{}}}],["angular",{"_index":322,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular/src/angular",{"_index":326,"title":{},"body":{"index.html":{}}}],["api",{"_index":9,"title":{},"body":{"classes/ApiService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api.getcurrentweather('c",{"_index":295,"title":{},"body":{"index.html":{}}}],["api.getcurrentweather('loc",{"_index":304,"title":{},"body":{"index.html":{}}}],["api.getcurrentweather('zip",{"_index":302,"title":{},"body":{"index.html":{}}}],["api/config.servic",{"_index":212,"title":{},"body":{"classes/CurrentService.html":{}}}],["api_url",{"_index":214,"title":{},"body":{"classes/CurrentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apigener",{"_index":278,"title":{},"body":{"index.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["apiservic",{"_index":1,"title":{"classes/ApiService.html":{}},"body":{"classes/ApiService.html":{},"coverage.html":{},"index.html":{}}}],["apiservice('your_api_key",{"_index":288,"title":{},"body":{"index.html":{}}}],["applic",{"_index":313,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":84,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{}}}],["aris",{"_index":396,"title":{},"body":{"license.html":{}}}],["array",{"_index":48,"title":{},"body":{"classes/ApiService.html":{}}}],["associ",{"_index":352,"title":{},"body":{"license.html":{}}}],["async",{"_index":19,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["author",{"_index":385,"title":{},"body":{"license.html":{}}}],["automat",{"_index":182,"title":{},"body":{"classes/ConfigService.html":{}}}],["avail",{"_index":119,"title":{},"body":{"classes/CitiesService.html":{},"miscellaneous/variables.html":{}}}],["available_lang",{"_index":164,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available_langs.find",{"_index":169,"title":{},"body":{"classes/ConfigService.html":{}}}],["axio",{"_index":82,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"dependencies.html":{}}}],["axios.defaults.headers.get['cont",{"_index":172,"title":{},"body":{"classes/ConfigService.html":{}}}],["axios.defaults.headers.post['cont",{"_index":83,"title":{},"body":{"classes/ApiService.html":{}}}],["axios.get(url).then",{"_index":229,"title":{},"body":{"classes/CurrentService.html":{}}}],["barcelona",{"_index":196,"title":{},"body":{"classes/CurrentService.html":{},"index.html":{}}}],["barcelona,",{"_index":263,"title":{},"body":{"index.html":{}}}],["barcelona,es']).then",{"_index":296,"title":{},"body":{"index.html":{}}}],["basic",{"_index":260,"title":{},"body":{"index.html":{}}}],["bilbao",{"_index":210,"title":{},"body":{"classes/CurrentService.html":{}}}],["bilbao,",{"_index":265,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":117,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["build",{"_index":306,"title":{},"body":{"index.html":{}}}],["c",{"_index":338,"title":{},"body":{"license.html":{}}}],["ca",{"_index":405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catala",{"_index":156,"title":{},"body":{"classes/ConfigService.html":{}}}],["celsiu",{"_index":161,"title":{},"body":{"classes/ConfigService.html":{}}}],["charg",{"_index":347,"title":{},"body":{"license.html":{}}}],["citi",{"_index":103,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["cities_list",{"_index":113,"title":{},"body":{"classes/CitiesService.html":{}}}],["citiesservic",{"_index":106,"title":{"classes/CitiesService.html":{}},"body":{"classes/CitiesService.html":{},"coverage.html":{}}}],["city.nam",{"_index":136,"title":{},"body":{"classes/CitiesService.html":{}}}],["claim",{"_index":388,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"overview.html":{}}}],["cli",{"_index":327,"title":{},"body":{"index.html":{}}}],["client",{"_index":312,"title":{},"body":{"index.html":{}}}],["code",{"_index":152,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["condit",{"_index":368,"title":{},"body":{"license.html":{}}}],["config",{"_index":139,"title":{},"body":{"classes/ConfigService.html":{}}}],["configs/browser.j",{"_index":329,"title":{},"body":{"index.html":{}}}],["configservic",{"_index":137,"title":{"classes/ConfigService.html":{}},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{}}}],["configservice.options(jsonformat",{"_index":228,"title":{},"body":{"classes/CurrentService.html":{}}}],["configservice.setlanguage(lang",{"_index":218,"title":{},"body":{"classes/CurrentService.html":{}}}],["configservice.setunitmetric(unitmetr",{"_index":217,"title":{},"body":{"classes/CurrentService.html":{}}}],["configur",{"_index":314,"title":{},"body":{"index.html":{}}}],["connect",{"_index":398,"title":{},"body":{"license.html":{}}}],["consol",{"_index":301,"title":{},"body":{"index.html":{}}}],["console.error(err",{"_index":299,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":133,"title":{},"body":{"classes/CitiesService.html":{},"index.html":{}}}],["console.log(data",{"_index":297,"title":{},"body":{"index.html":{}}}],["const",{"_index":96,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["constant",{"_index":115,"title":{},"body":{"classes/CitiesService.html":{}}}],["constants/c",{"_index":130,"title":{},"body":{"classes/CitiesService.html":{}}}],["constants/environ",{"_index":215,"title":{},"body":{"classes/CurrentService.html":{}}}],["constants/languag",{"_index":165,"title":{},"body":{"classes/ConfigService.html":{}}}],["construct",{"_index":29,"title":{},"body":{"classes/ApiService.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/ApiService.html":{}}}],["constructor(apikey",{"_index":22,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["contain",{"_index":59,"title":{},"body":{"classes/ApiService.html":{}}}],["contract",{"_index":393,"title":{},"body":{"license.html":{}}}],["coordin",{"_index":200,"title":{},"body":{"classes/CurrentService.html":{}}}],["copi",{"_index":350,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":337,"title":{},"body":{"license.html":{}}}],["countri",{"_index":192,"title":{},"body":{"classes/CurrentService.html":{}}}],["cours",{"_index":340,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":234,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":50,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["current.getbycity(param[0]).then(data",{"_index":102,"title":{},"body":{"classes/ApiService.html":{}}}],["current.getbylocation(param[0]).then(data",{"_index":101,"title":{},"body":{"classes/ApiService.html":{}}}],["current.getbyzip(param[0]).then(data",{"_index":99,"title":{},"body":{"classes/ApiService.html":{}}}],["currentservic",{"_index":80,"title":{"classes/CurrentService.html":{}},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"coverage.html":{}}}],["currentservice(this.apikey",{"_index":98,"title":{},"body":{"classes/ApiService.html":{}}}],["damag",{"_index":389,"title":{},"body":{"license.html":{}}}],["data",{"_index":52,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["data.data",{"_index":230,"title":{},"body":{"classes/CurrentService.html":{}}}],["day",{"_index":269,"title":{},"body":{"index.html":{}}}],["deal",{"_index":353,"title":{},"body":{"license.html":{}}}],["default",{"_index":30,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":26,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["depend",{"_index":57,"title":{"dependencies.html":{}},"body":{"classes/ApiService.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["devkit/build",{"_index":325,"title":{},"body":{"index.html":{}}}],["differ",{"_index":10,"title":{},"body":{"classes/ApiService.html":{}}}],["dist",{"_index":279,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":361,"title":{},"body":{"license.html":{}}}],["document",{"_index":235,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["empti",{"_index":319,"title":{},"body":{"index.html":{}}}],["en",{"_index":87,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":330,"title":{},"body":{"index.html":{}}}],["englishhow",{"_index":294,"title":{},"body":{"index.html":{}}}],["enumer",{"_index":251,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":298,"title":{},"body":{"index.html":{}}}],["error",{"_index":300,"title":{},"body":{"index.html":{}}}],["es",{"_index":289,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["event",{"_index":384,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":64,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["exist",{"_index":128,"title":{},"body":{"classes/CitiesService.html":{}}}],["export",{"_index":85,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["express",{"_index":377,"title":{},"body":{"license.html":{}}}],["extraplugin",{"_index":333,"title":{},"body":{"index.html":{}}}],["fals",{"_index":334,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["files/models/webpack",{"_index":328,"title":{},"body":{"index.html":{}}}],["filter",{"_index":55,"title":{},"body":{"classes/ApiService.html":{}}}],["find",{"_index":56,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["findtyp",{"_index":252,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["findvalu",{"_index":221,"title":{},"body":{"classes/CurrentService.html":{}}}],["first",{"_index":63,"title":{},"body":{"classes/ApiService.html":{}}}],["fit",{"_index":380,"title":{},"body":{"license.html":{}}}],["follow",{"_index":286,"title":{},"body":{"index.html":{},"license.html":{}}}],["forecast",{"_index":266,"title":{},"body":{"index.html":{}}}],["format",{"_index":62,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["fr",{"_index":406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":346,"title":{},"body":{"license.html":{}}}],["fs",{"_index":318,"title":{},"body":{"index.html":{}}}],["function",{"_index":261,"title":{},"body":{"index.html":{}}}],["furnish",{"_index":366,"title":{},"body":{"license.html":{}}}],["get",{"_index":256,"title":{"index.html":{},"license.html":{}},"body":{}}],["getbyc",{"_index":187,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(&#39;barcelona&#39",{"_index":195,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(&#39;madrid,es&#39",{"_index":193,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity('barcelona",{"_index":220,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity('madrid,",{"_index":219,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(c",{"_index":190,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyloc",{"_index":188,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbylocation(loc",{"_index":197,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyzip",{"_index":189,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyzip(zipcod",{"_index":205,"title":{},"body":{"classes/CurrentService.html":{}}}],["getcurrentweath",{"_index":20,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;city&#39",{"_index":65,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;location&#39",{"_index":69,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;zip&#39",{"_index":76,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('c",{"_index":91,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('loc",{"_index":93,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('zip",{"_index":94,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(typ",{"_index":47,"title":{},"body":{"classes/ApiService.html":{}}}],["getlist",{"_index":109,"title":{},"body":{"classes/CitiesService.html":{}}}],["getlist(json",{"_index":116,"title":{},"body":{"classes/CitiesService.html":{}}}],["go",{"_index":323,"title":{},"body":{"index.html":{}}}],["grant",{"_index":345,"title":{},"body":{"license.html":{}}}],["gt",{"_index":67,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["header",{"_index":149,"title":{},"body":{"classes/ConfigService.html":{}}}],["herebi",{"_index":344,"title":{},"body":{"license.html":{}}}],["holder",{"_index":386,"title":{},"body":{"license.html":{}}}],["hour",{"_index":271,"title":{},"body":{"index.html":{}}}],["http",{"_index":181,"title":{},"body":{"classes/ConfigService.html":{}}}],["https://api.openweathermap.org/data/2.5",{"_index":404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifi",{"_index":236,"title":{},"body":{"coverage.html":{}}}],["ignor",{"_index":216,"title":{},"body":{"classes/CurrentService.html":{}}}],["implement",{"_index":274,"title":{},"body":{"index.html":{}}}],["impli",{"_index":378,"title":{},"body":{"license.html":{}}}],["import",{"_index":79,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["includ",{"_index":310,"title":{},"body":{"index.html":{},"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["input",{"_index":58,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["insid",{"_index":311,"title":{},"body":{"index.html":{}}}],["instal",{"_index":275,"title":{},"body":{"index.html":{}}}],["interfaces/location.interfac",{"_index":213,"title":{},"body":{"classes/CurrentService.html":{}}}],["javascript",{"_index":290,"title":{},"body":{"index.html":{}}}],["js",{"_index":341,"title":{},"body":{"license.html":{}}}],["json",{"_index":120,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["json.stringify(this.list['list",{"_index":132,"title":{},"body":{"classes/CitiesService.html":{}}}],["jsonvalu",{"_index":146,"title":{},"body":{"classes/ConfigService.html":{}}}],["kelvin",{"_index":162,"title":{},"body":{"classes/ConfigService.html":{}}}],["key",{"_index":38,"title":{},"body":{"classes/ApiService.html":{},"index.html":{}}}],["kind",{"_index":376,"title":{},"body":{"license.html":{}}}],["la",{"_index":74,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["lang",{"_index":25,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["lang=${languag",{"_index":171,"title":{},"body":{"classes/ConfigService.html":{}}}],["languag",{"_index":16,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["lat",{"_index":70,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["lat=${location.lat}&lon=${location.lon",{"_index":231,"title":{},"body":{"classes/CurrentService.html":{}}}],["liabil",{"_index":390,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":387,"title":{},"body":{"license.html":{}}}],["lib",{"_index":291,"title":{},"body":{"index.html":{}}}],["lib.apiservic",{"_index":293,"title":{},"body":{"index.html":{}}}],["lib/.../environments.t",{"_index":402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../find",{"_index":253,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../languages.t",{"_index":403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/classes/enums/find",{"_index":255,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/classes/services/api/api.service.t",{"_index":5,"title":{},"body":{"classes/ApiService.html":{},"coverage.html":{}}}],["lib/classes/services/api/api.service.ts:12",{"_index":42,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:16",{"_index":43,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:20",{"_index":27,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:41",{"_index":49,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/config.service.t",{"_index":138,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{}}}],["lib/classes/services/api/config.service.ts:12",{"_index":158,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:26",{"_index":151,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:38",{"_index":147,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:46",{"_index":145,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/cities.service.t",{"_index":107,"title":{},"body":{"classes/CitiesService.html":{},"coverage.html":{}}}],["lib/classes/services/cities.service.ts:14",{"_index":118,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:24",{"_index":122,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:37",{"_index":127,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:9",{"_index":114,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/weather/current.service.t",{"_index":185,"title":{},"body":{"classes/CurrentService.html":{},"coverage.html":{}}}],["lib/classes/services/weather/current.service.ts:38",{"_index":191,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:61",{"_index":198,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:77",{"_index":206,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/constants/environments.t",{"_index":242,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/constants/languages.t",{"_index":245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["librari",{"_index":124,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["licens",{"_index":335,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":356,"title":{},"body":{"license.html":{}}}],["list",{"_index":108,"title":{},"body":{"classes/CitiesService.html":{},"miscellaneous/variables.html":{}}}],["lng",{"_index":72,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["locat",{"_index":100,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["locaton",{"_index":53,"title":{},"body":{"classes/ApiService.html":{}}}],["m",{"_index":86,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["madrid",{"_index":68,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["madrid,",{"_index":92,"title":{},"body":{"classes/ApiService.html":{}}}],["manag",{"_index":8,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["match",{"_index":105,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchant",{"_index":379,"title":{},"body":{"license.html":{}}}],["merg",{"_index":359,"title":{},"body":{"license.html":{}}}],["method",{"_index":18,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["metr",{"_index":45,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["metric",{"_index":40,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["mill",{"_index":46,"title":{},"body":{"classes/ApiService.html":{}}}],["miscellan",{"_index":250,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":336,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":358,"title":{},"body":{"license.html":{}}}],["modul",{"_index":399,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mugan86/openweath",{"_index":277,"title":{},"body":{"index.html":{}}}],["name",{"_index":34,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["need",{"_index":37,"title":{},"body":{"classes/ApiService.html":{}}}],["net",{"_index":320,"title":{},"body":{"index.html":{}}}],["new",{"_index":97,"title":{},"body":{"classes/ApiService.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":267,"title":{},"body":{"index.html":{}}}],["node",{"_index":317,"title":{},"body":{"index.html":{}}}],["node_modules/@angular",{"_index":324,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":383,"title":{},"body":{"license.html":{}}}],["notic",{"_index":370,"title":{},"body":{"license.html":{}}}],["npm",{"_index":276,"title":{},"body":{"index.html":{},"license.html":{}}}],["null",{"_index":222,"title":{},"body":{"classes/CurrentService.html":{}}}],["number",{"_index":201,"title":{},"body":{"classes/CurrentService.html":{}}}],["object",{"_index":129,"title":{},"body":{"classes/CitiesService.html":{}}}],["obtain",{"_index":349,"title":{},"body":{"license.html":{}}}],["openweath",{"_index":258,"title":{},"body":{"index.html":{}}}],["openweathermap",{"_index":285,"title":{},"body":{"index.html":{}}}],["option",{"_index":36,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["options(jsonvalu",{"_index":144,"title":{},"body":{"classes/ConfigService.html":{}}}],["otherwis",{"_index":395,"title":{},"body":{"license.html":{}}}],["out",{"_index":397,"title":{},"body":{"license.html":{}}}],["overview",{"_index":400,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":248,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":31,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["paramet",{"_index":32,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["paris,fr",{"_index":264,"title":{},"body":{"index.html":{}}}],["pars",{"_index":183,"title":{},"body":{"classes/ConfigService.html":{}}}],["particular",{"_index":381,"title":{},"body":{"license.html":{}}}],["pend",{"_index":273,"title":{},"body":{"index.html":{}}}],["period",{"_index":272,"title":{},"body":{"index.html":{}}}],["permiss",{"_index":343,"title":{},"body":{"license.html":{}}}],["permit",{"_index":365,"title":{},"body":{"license.html":{}}}],["person",{"_index":348,"title":{},"body":{"license.html":{}}}],["place",{"_index":199,"title":{},"body":{"classes/CurrentService.html":{}}}],["plugin",{"_index":332,"title":{},"body":{"index.html":{}}}],["portion",{"_index":373,"title":{},"body":{"license.html":{}}}],["posit",{"_index":61,"title":{},"body":{"classes/ApiService.html":{}}}],["printcitieslist",{"_index":110,"title":{},"body":{"classes/CitiesService.html":{}}}],["privat",{"_index":14,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["project",{"_index":307,"title":{},"body":{"index.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{}}}],["provid",{"_index":374,"title":{},"body":{"license.html":{}}}],["public",{"_index":166,"title":{},"body":{"classes/ConfigService.html":{}}}],["publish",{"_index":360,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":382,"title":{},"body":{"license.html":{}}}],["q=${citi",{"_index":224,"title":{},"body":{"classes/CurrentService.html":{}}}],["q=london,uk",{"_index":223,"title":{},"body":{"classes/CurrentService.html":{}}}],["qs",{"_index":173,"title":{},"body":{"classes/ConfigService.html":{}}}],["regist",{"_index":284,"title":{},"body":{"index.html":{}}}],["replac",{"_index":331,"title":{},"body":{"index.html":{}}}],["request",{"_index":11,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["require('@mugan86/openweath",{"_index":292,"title":{},"body":{"index.html":{}}}],["respons",{"_index":184,"title":{},"body":{"classes/ConfigService.html":{}}}],["restrict",{"_index":355,"title":{},"body":{"license.html":{}}}],["result",{"_index":104,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":78,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["right",{"_index":357,"title":{},"body":{"license.html":{}}}],["roma",{"_index":204,"title":{},"body":{"classes/CurrentService.html":{}}}],["roma,it",{"_index":262,"title":{},"body":{"index.html":{}}}],["run",{"_index":280,"title":{},"body":{"index.html":{}}}],["rx",{"_index":180,"title":{},"body":{"classes/ConfigService.html":{}}}],["rxhr.get(url",{"_index":227,"title":{},"body":{"classes/CurrentService.html":{}}}],["select",{"_index":41,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["selectc",{"_index":111,"title":{},"body":{"classes/CitiesService.html":{}}}],["selectcity(nam",{"_index":126,"title":{},"body":{"classes/CitiesService.html":{}}}],["sell",{"_index":364,"title":{},"body":{"license.html":{}}}],["serv",{"_index":186,"title":{},"body":{"classes/CurrentService.html":{}}}],["servic",{"_index":7,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["setjsonformat",{"_index":141,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguag",{"_index":142,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(&#39;ca&#39",{"_index":155,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(&#39;es&#39",{"_index":153,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage('",{"_index":167,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage('ca",{"_index":168,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(languag",{"_index":150,"title":{},"body":{"classes/ConfigService.html":{}}}],["setunitmetr",{"_index":143,"title":{},"body":{"classes/ConfigService.html":{}}}],["setunitmetric(unit",{"_index":157,"title":{},"body":{"classes/ConfigService.html":{}}}],["shall",{"_index":371,"title":{},"body":{"license.html":{}}}],["show",{"_index":123,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["softwar",{"_index":351,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["spain",{"_index":194,"title":{},"body":{"classes/CurrentService.html":{}}}],["spanish",{"_index":154,"title":{},"body":{"classes/ConfigService.html":{}}}],["standard",{"_index":159,"title":{},"body":{"classes/ConfigService.html":{}}}],["start",{"_index":257,"title":{"index.html":{},"license.html":{}},"body":{}}],["statement",{"_index":237,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":140,"title":{},"body":{"classes/ConfigService.html":{}}}],["string",{"_index":23,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":367,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":362,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":372,"title":{},"body":{"license.html":{}}}],["tabl",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":28,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["target",{"_index":315,"title":{},"body":{"index.html":{}}}],["temperatur",{"_index":160,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.apikey",{"_index":88,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["this.getlist",{"_index":134,"title":{},"body":{"classes/CitiesService.html":{}}}],["this.languag",{"_index":90,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["this.list['list",{"_index":131,"title":{},"body":{"classes/CitiesService.html":{}}}],["this.unitmetr",{"_index":89,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["tl",{"_index":321,"title":{},"body":{"index.html":{}}}],["tort",{"_index":394,"title":{},"body":{"license.html":{}}}],["true",{"_index":121,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["ts",{"_index":342,"title":{},"body":{"license.html":{}}}],["tsc",{"_index":282,"title":{},"body":{"index.html":{}}}],["type",{"_index":35,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum.t",{"_index":254,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":287,"title":{},"body":{"index.html":{}}}],["undefin",{"_index":170,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["unit",{"_index":39,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["unitmet",{"_index":24,"title":{},"body":{"classes/ApiService.html":{}}}],["unitmetr",{"_index":17,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["units=metr",{"_index":163,"title":{},"body":{"classes/ConfigService.html":{}}}],["uri",{"_index":176,"title":{},"body":{"classes/ConfigService.html":{}}}],["url",{"_index":225,"title":{},"body":{"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["us",{"_index":44,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":178,"title":{},"body":{"classes/ConfigService.html":{}}}],["valu",{"_index":112,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":243,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["vega",{"_index":75,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["void",{"_index":125,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["want",{"_index":309,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":375,"title":{},"body":{"license.html":{}}}],["watchor",{"_index":281,"title":{},"body":{"index.html":{}}}],["weather",{"_index":51,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["weather/current.servic",{"_index":81,"title":{},"body":{"classes/ApiService.html":{}}}],["weather?${findvalue}${this.unitmetric}${this.language}&appid",{"_index":226,"title":{},"body":{"classes/CurrentService.html":{}}}],["weather?${value}${this.unitmetric}${this.language}&appid",{"_index":232,"title":{},"body":{"classes/CurrentService.html":{}}}],["weather?zip=${zipcode}${this.unitmetric}${this.language}&appid",{"_index":233,"title":{},"body":{"classes/CurrentService.html":{}}}],["web",{"_index":316,"title":{},"body":{"index.html":{}}}],["webpack",{"_index":308,"title":{},"body":{"index.html":{}}}],["whether",{"_index":391,"title":{},"body":{"license.html":{}}}],["without",{"_index":354,"title":{},"body":{"license.html":{}}}],["work",{"_index":259,"title":{},"body":{"index.html":{}}}],["wusag",{"_index":283,"title":{},"body":{"index.html":{}}}],["xxxxx",{"_index":175,"title":{},"body":{"classes/ConfigService.html":{}}}],["zip",{"_index":54,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["zipcod",{"_index":207,"title":{},"body":{"classes/CurrentService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiService.html":{"url":"classes/ApiService.html","title":"class - ApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/api/api.service.ts\n        \n\n            \n                Description\n            \n            \n                Service that manage API differents requests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiKey\n                            \n                            \n                                    Private\n                                language\n                            \n                            \n                                    Private\n                                unitMetric\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCurrentWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apiKey: string, unitMet: string, lang: string)\n                    \n                \n                        \n                            \n                                Defined in lib/classes/services/api/api.service.ts:20\n                            \n                        \n\n                \n                    \n                            Take construct default properties by params\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Need Api Key\n\n                                                        \n                                                \n                                                \n                                                        unitMet\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Default unit metric\n\n                                                        \n                                                \n                                                \n                                                        lang\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Select language\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            apiKey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        apiKey:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:12\n                            \n                        \n\n                \n                    \n                        Need Api Key to take API info\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            language\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        language:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:20\n                            \n                        \n\n                \n                    \n                        select language\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unitMetric\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unitMetric:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:16\n                            \n                        \n\n                \n                    \n                        Property to define use unit metric, metres or milles\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getCurrentWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCurrentWeather(type: string, param: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:41\n                            \n                        \n\n\n                \n                    \n                            Get current weather data using name, locaton or zip filters.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Filter to use to find weather dependent input data\n\n                                                        \n                                                \n                                                \n                                                        param\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                array with contain 1 position data in any format. In first filter data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            getCurrentWeather(&#39;city&#39;, [&#39;Madrid,es&#39;]) -&gt; Madrid\ngetCurrentWeather(&#39;location&#39;, [{lat: 36.1699412, lng: -115.13982959999998}]) -&gt; Las Vegas\ngetCurrentWeather(&#39;zip&#39;, [&#39;89104&#39;]) -&gt; Las Vegas\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { CurrentService } from './../weather/current.service';\nimport axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\n/**\n * Service that manage API differents requests\n */\nexport class ApiService {\n    /**\n     * Need Api Key to take API info\n     */\n    private apiKey: string;\n    /**\n     * Property to define use unit metric, metres or milles\n     */\n    private unitMetric: string;\n    /**\n     * select language\n     */\n    private language: string;\n    /**\n     * Take construct default properties by params\n     * @param apiKey Need Api Key\n     * @param unitMet Default unit metric\n     * @param lang Select language\n     */\n    constructor(apiKey: string, unitMet: string = 'm', lang: string = 'en') {\n        this.apiKey = apiKey;\n        this.unitMetric = unitMet;\n        this.language = lang;\n    }\n    /**\n     * Get current weather data using name, locaton or zip filters.\n     * @example\n     * getCurrentWeather('city', ['Madrid,es']) -> Madrid\n     * getCurrentWeather('location', [{lat: 36.1699412, lng: -115.13982959999998}]) -> Las Vegas\n     * getCurrentWeather('zip', ['89104']) -> Las Vegas\n     * @param type Filter to use to find weather dependent input data\n     * @param param array with contain 1 position data in any format. In first filter data\n     */\n    async getCurrentWeather(type: string, param: Array) {\n        const current = new CurrentService(this.apiKey, this.unitMetric, this.language);\n        if (type === 'zip') {\n            return current.getByZip(param[0]).then(data => data);\n        } else if (type === 'location') {\n            return current.getByLocation(param[0]).then(data => data);\n        } \n        return current.getByCity(param[0]).then(data => data); // by city\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesService.html":{"url":"classes/CitiesService.html","title":"class - CitiesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/cities.service.ts\n        \n\n            \n                Description\n            \n            \n                Manage cities info\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                printCitiesList\n                            \n                            \n                                selectCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            list\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        list:     \n\n                    \n                \n                    \n                        \n                            Default value : CITIES_LIST\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:9\n                            \n                        \n\n                \n                    \n                        Take cities list from constants\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(json: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:14\n                            \n                        \n\n\n                \n                    \n                            Take available cities list\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        json\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                true\n                                                        \n\n                                                        \n                                                                Return in JSON or no. Default \"true\"\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            printCitiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \nprintCitiesList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:24\n                            \n                        \n\n\n                \n                    \n                            Show cities list available in library by default\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectCity(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:37\n                            \n                        \n\n\n                \n                    \n                            Use exist List in library to take select city object info\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Name of city to take all info\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { CITIES_LIST } from './../../constants/cities-list';\n/**\n * Manage cities info\n */\nexport class CitiesService {\n    /**\n     * Take cities list from constants\n     */\n    list = CITIES_LIST;\n    /**\n     * Take available cities list\n     * @param json Return in JSON or no. Default \"true\"\n     */\n    getList(json: boolean = true) {\n        if (json) {\n            return this.list['list'];\n        }\n        return JSON.stringify(this.list['list']);\n    }\n\n    /**\n     * Show cities list available in library by default\n     */\n    printCitiesList() {\n        console.log('********************************');\n        const cities = this.getList();\n        for (let i = 0; i  city.name === name );\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/api/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Service to manage library config values\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                options\n                            \n                            \n                                    Static\n                                setJsonFormat\n                            \n                            \n                                    Static\n                                setLanguage\n                            \n                            \n                                    Static\n                                setUnitMetric\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            options\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        options(jsonValue: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:46\n                            \n                        \n\n\n                \n                    \n                            Take options\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jsonValue\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                true\n                                                        \n\n                                                        \n                                                                take JSON format or no\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     { json: boolean; }\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setJsonFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setJsonFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:38\n                            \n                        \n\n\n                \n                    \n                            Add headers in JSON Format\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setLanguage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setLanguage(language: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:26\n                            \n                        \n\n\n                \n                    \n                            Define default language use to show description in select language\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        language\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Select language code.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            setLanguage(&#39;es&#39;)--&gt; Spanish language\nsetLanguage(&#39;ca&#39;)--&gt; Catala language\n                                        \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setUnitMetric\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setUnitMetric(unit: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:12\n                            \n                        \n\n\n                \n                    \n                            Manage to return metric or standard metric values\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Metric unit to return value in temperature with celsius or kelvin\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     \"&units=metric\" | \"\"\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AVAILABLE_LANGS } from './../../../constants/languages';\nimport axios from 'axios';\n\n/**\n * Service to manage library config values\n */\nexport class ConfigService {\n    /**\n     * Manage to return metric or standard metric values\n     * @param unit Metric unit to return value in temperature with celsius or kelvin\n     */\n    public static setUnitMetric(unit: string) {\n        if (unit === 'm' || unit === 'metres') {\n            return `&units=metric`;\n        }\n        return ``;\n    }\n\n    /**\n     * Define default language use to show description in select language\n     * @example\n     * setLanguage('es')--> Spanish language\n     * setLanguage('ca')--> Catala language\n     * @param language { string } Select language code.\n     */\n    public static setLanguage(language: string) {\n        \n        if (language === '' || AVAILABLE_LANGS.find( (lang: any) => lang === language ) === undefined) {\n            return ``;\n        }\n        return `&lang=${language}`;\n    }\n\n    /**\n     * Add headers in JSON Format\n     * @param json \n     */\n    public static setJsonFormat() {\n        axios.defaults.headers.get['Content-Type'] = 'application/json';\n    }\n\n    /**\n     * Take options\n     * @param jsonValue take JSON format or no\n     */\n    public static options(jsonValue: boolean = true) {\n        /*\n        qs: {\n                access_token: 'xxxxx xxxxx' // -> uri + '?access_token=xxxxx%20xxxxx'\n            },\n        headers: {\n                'User-Agent': 'Rx-Http-Request'\n            },*/\n        const options = {\n            json: jsonValue // Automatically parses the JSON string in the response\n        };\n        return options;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CurrentService.html":{"url":"classes/CurrentService.html","title":"class - CurrentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CurrentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/weather/current.service.ts\n        \n\n            \n                Description\n            \n            \n                Current Weather serve service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getByCity\n                            \n                            \n                                    Async\n                                getByLocation\n                            \n                            \n                                    Async\n                                getByZip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByCity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByCity(city: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:38\n                            \n                        \n\n\n                \n                    \n                            Take current weather of select city and country.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ''\n                                                        \n\n                                                        \n                                                                add select city.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            getByCity(&#39;Madrid,es&#39;) --&gt; Madrid (Spain) current weather Data.\ngetByCity(&#39;Barcelona&#39;) --&gt; Find Barcelona (Spain)\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByLocation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByLocation(location: Location)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:61\n                            \n                        \n\n\n                \n                    \n                            Take current weather data in select place to add coordinates\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                        \n                                                                    Location\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Add location coordinates in {lat: number, lng: number } format\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            location = {lat: 36.1699412, lng: -115.13982959999998} - Las Vegas\nlocation = {lat: 41.9027835, lng: 12.496365500000024} - Roma\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByZip\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByZip(zipCode: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:77\n                            \n                        \n\n\n                \n                    \n                            Input select city zip code to take this select weather current data.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        zipCode\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \"-1\"\n                                                        \n\n                                                        \n                                                                location zip code add. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            Las Vegas = 48104\nBarcelona = 08026\nBilbao = 48002\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from './../api/config.service';\nimport { Location } from './../../interfaces/location.interface';\nimport { API_URL } from '../../../constants/environments';\nimport axios from 'axios';\n\n/**\n * Current Weather serve service\n */\nexport class CurrentService {\n    /**\n     * @ignore\n     */\n    private apiKey: string;\n    /**\n     * @ignore\n     */\n    private unitMetric: string;\n    /**\n     * @ignore\n     */\n    private language: string;\n    /**\n     * @ignore\n     */\n    constructor(apiKey: string, unitMetric: string = 'm', lang: string = 'en') {\n        this.apiKey = apiKey;\n        this.unitMetric = ConfigService.setUnitMetric(unitMetric);\n        this.language = ConfigService.setLanguage(lang);\n    }\n    \n    /**\n    * Take current weather of select city and country.\n    * @example\n    * getByCity('Madrid,es') --> Madrid (Spain) current weather Data.\n    * getByCity('Barcelona') --> Find Barcelona (Spain)\n    * @param city { string} add select city.\n    */\n    async getByCity(city: string = '') {\n        \n        let findValue = '';\n        if (city === null || city === undefined || city === '') {\n            findValue = 'q=London,uk';\n        } else {\n            findValue = `q=${city}`;\n        }\n        const URL = `${API_URL }weather?${findValue}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        // return RxHR.get(URL, ConfigService.options(jsonFormat));\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n                                            \n    }\n\n    /**\n     * Take current weather data in select place to add coordinates\n     * @example \n     * location = {lat: 36.1699412, lng: -115.13982959999998} - Las Vegas\n     * location = {lat: 41.9027835, lng: 12.496365500000024} - Roma\n     * @param location {Location} Add location coordinates in {lat: number, lng: number } format\n     */\n    async getByLocation(location: Location) {\n        const value = `lat=${location.lat}&lon=${location.lon}`;\n        const URL = `${API_URL }weather?${value}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n    }\n\n    /**\n     * Input select city zip code to take this select weather current data.\n     * @example\n     * Las Vegas = 48104\n     * Barcelona = 08026\n     * Bilbao = 48002\n     * @param zipCode { string } location zip code add. \n     */\n    async getByZip(zipCode: string = \"-1\") {\n        const URL = `${API_URL }weather?zip=${zipCode}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/classes/services/api/api.service.ts\n            \n            \n                class\n            \n            \n                ApiService\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/classes/services/api/config.service.ts\n            \n            \n                class\n            \n            \n                ConfigService\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/classes/services/cities.service.ts\n            \n            \n                class\n            \n            \n                CitiesService\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/classes/services/weather/current.service.ts\n            \n            \n                class\n            \n            \n                CurrentService\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/constants/environments.ts\n            \n            \n                variable\n            \n            \n                API_URL\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/constants/languages.ts\n            \n            \n                variable\n            \n            \n                AVAILABLE_LANGS\n            \n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            axios : ^0.18.0\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FindType   (lib/.../find-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/classes/enums/find-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FindType\n                    \n                \n                        \n                            \n                                 City\n                            \n                        \n                        \n                            \n                                Value : city\n                            \n                        \n                        \n                            \n                                 Location\n                            \n                        \n                        \n                            \n                                Value : location\n                            \n                        \n                        \n                            \n                                 Zip\n                            \n                        \n                        \n                            \n                                Value : zip\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOpenweather API (in working)\n \n\n\n\nAPI Openweather with basic request.\nFunctions\nCurrent Weather data.\n\nBy city name: Examples = ('Roma,it', 'Barcelona,es', 'Paris,fr', 'Bilbao,es' ,...)\nBy location: Example: {lat: 36.1699412, lng: -115.13982959999998} = Las Vegas\nBy zip code: Example: 89104 - Las Vegas\n\nForecast Weather data (Next 5 days in 3 hours period)\n\nPending to implement\n\nInstallation.\nnpm install @mugan86/openweather-apiGenerate DIST\nnpm run watchor\ntsc -wUsage\n\nRegister in Openweathermap.\nTake API key from: API Keys\nFollow this example. Basic example.\n\nImports\nTypescript\nimport { ApiService } from '@mugan86/openweather-api';\n\nconst api = new ApiService('YOUR_API_KEY', 'm', 'es');\nJavascript\nconst lib = require('@mugan86/openweather-api');\nconst apiService = lib.ApiService;\n\nconst api = new apiService('YOUR_API_KEY'); // unit metric = metres / lang = englishHow to use\napi.getCurrentWeather('city', ['Barcelona,es']).then(\n    (data) => {\n        console.log('***************** BARCELONA *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);\n\napi.getCurrentWeather('zip', ['89104']).then(\n    (data) => { \n        console.log('***************** LAS VEGAS *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);\n\napi.getCurrentWeather('location', [{lat: 36.1699412, lng: -115.13982959999998}]).then(\n    (data) => { \n        console.log('***************** LAS VEGAS *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);Build your project with Webpack\nIf you want to include this library inside a project builds with webpack for a client application, you must add this configuration inside your webpack configuration:\n{\n    target: \"web\",\n    node: {\n        fs: \"empty\",\n        net: \"empty\",\n        tls: \"empty\"\n    }\n}Build your project with Webpack in Angular\nIf you want to include this library inside a project builds with webpack for a client application, you must add this configuration inside your webpack configuration. Go to node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs/browser.js\nGo to file end and replace:\n{\n    plugins: extraPlugins,\n    node: false\n}with \n{\n    plugins: extraPlugins,\n    target: \"web\",\n    node: {\n        fs: \"empty\",\n        net: \"empty\",\n        tls: \"empty\"\n    }\n}License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Npm Course: JS, TS and Angular\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (lib/.../environments.ts)\n                        \n                        \n                            AVAILABLE_LANGS   (lib/.../languages.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/constants/environments.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            API_URL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        API_URL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'https://api.openweathermap.org/data/2.5/'\n                        \n                    \n\n                \n                    \n                        Default API URL\n\n                    \n                \n\n            \n        \n\n    lib/constants/languages.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AVAILABLE_LANGS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        AVAILABLE_LANGS:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'en', 'es', 'ca', 'it', 'fr'\n]\n                        \n                    \n\n                \n                    \n                        List with available languages\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
