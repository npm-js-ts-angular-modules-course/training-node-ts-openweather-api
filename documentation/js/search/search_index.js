var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/ApiService.html",[0,0.721,1,1.784]],["body/classes/ApiService.html",[0,0.678,1,1.676,2,0.573,3,0.3,4,0.189,5,1.447,6,0.532,7,2.75,8,2.251,9,2.663,10,2.75,11,1.922,12,0.224,13,0.834,14,3.964,15,3.575,16,3.053,17,3.117,18,1.676,19,2.762,20,2.75,21,1.447,22,2.251,23,1.071,24,3.808,25,2.321,26,2.779,27,2.75,28,1.676,29,0.043,30,0.737,31,0.731,32,1.48,33,1.768,34,2.75,35,2.251,36,0.759,37,1.676,38,1.768,39,2.351,40,1.922,41,1.922,42,1.922,43,2.75,44,2.75,45,2.663,46,4.126,47,1.768,48,2.359,49,0.834,50,3.074,51,2.75,52,1.616,53,4.368,54,2.251,55,1.922,56,2.251,57,2.75,58,1.922,59,2.75,60,1.922,61,2.75,62,1.676,63,1.768,64,1.768,65,2.359,66,2.251,67,1.768,68,0.678,69,1.676,70,1.676,71,1.676,72,2.321,73,2.321,74,1.768,75,1.768,76,2.321,77,1.317,78,1.077,79,1.768,80,1.676,81,1.768,82,1.447,83,0.342,84,0.951,85,1.235,86,1.447,87,2.251,88,2.251,89,1.768,90,1.768,91,1.768,92,1.768,93,1.447,94,0.951,95,1.077,96,1.768,97,1.768,98,0.545,99,1.768,100,1.768,101,0.678,102,0.019,103,0.02]],["title/classes/CitiesService.html",[0,0.721,104,2.045]],["body/classes/CitiesService.html",[0,0.905,2,0.722,3,0.444,4,0.279,6,0.711,12,0.331,13,0.804,18,2.238,23,0.711,26,2.81,28,2.238,29,0.043,30,0.941,31,0.542,32,1.977,36,1.272,37,1.591,39,1.405,45,1.591,76,3.155,77,1.25,83,0.506,94,1.405,101,1.985,102,0.025,103,0.026,104,2.567,105,2.137,106,3.804,107,3.673,108,4.61,109,3.673,110,3.071,111,1.977,112,2.969,113,2.611,114,3.673,115,3.477,116,2.611,117,4.61,118,3.976,119,3.773,120,2.611,121,2.567,122,3.477,123,2.137,124,2.611,125,2.611,126,2.611,127,2.611,128,2.611,129,2.611,130,2.611,131,2.137,132,2.611,133,2.137,134,2.611]],["title/interfaces/City.html",[101,1.122,135,0.11]],["body/interfaces/City.html",[2,0.584,3,0.584,4,0.368,6,0.665,12,0.435,13,0.968,23,1.1,29,0.042,30,0.998,31,0.761,32,2.378,52,2.469,77,1.645,83,0.665,98,1.735,101,1.977,102,0.03,103,0.032,135,0.193,136,2.811,137,4.418,138,1.519,139,1.59,140,3.435]],["title/interfaces/Clouds.html",[135,0.11,141,1.006]],["body/interfaces/Clouds.html",[2,0.492,3,0.492,4,0.31,6,0.561,12,0.367,13,0.983,23,1.008,29,0.042,30,0.561,31,0.583,36,0.8,49,1.056,68,0.714,83,1.031,102,0.031,103,0.028,135,0.203,138,0.996,139,0.893,141,1.658,142,1.111,143,2.024,144,1.544,145,1.111,146,1.24,147,1.921,148,1.658,149,1.24,150,1.24,151,1.24,152,1.24,153,1.24,154,1.24,155,1.544,156,1.24,157,1.24,158,1.544,159,1.24,160,1.24,161,1.24,162,1.24,163,1.24,164,1.24,165,1.24]],["title/classes/ConfigService.html",[0,0.721,166,1.784]],["body/classes/ConfigService.html",[0,0.711,2,0.32,3,0.32,4,0.202,6,0.762,8,2.363,11,1.316,12,0.239,16,3.718,18,1.76,23,0.956,25,1.76,26,2.731,28,2.141,29,0.043,30,0.68,31,0.582,32,2.511,37,2.4,39,1.554,40,3.132,41,3.132,42,1.316,45,2.141,60,2.018,62,1.76,65,2.018,76,3.208,77,1.382,80,1.76,82,1.541,83,0.365,84,1.013,94,1.013,102,0.02,103,0.021,110,2.141,111,2.286,115,3.223,118,3.668,119,2.363,121,2.018,123,1.541,166,1.76,167,1.541,168,5.199,169,3.938,170,2.887,171,2.887,172,2.887,173,1.883,174,2.887,175,1.883,176,2.018,177,3.512,178,2.887,179,1.883,180,2.018,181,1.883,182,2.887,183,1.883,184,2.887,185,2.887,186,1.883,187,2.887,188,2.887,189,2.887,190,2.887,191,2.887,192,1.316,193,1.883,194,3.938,195,1.883,196,1.883,197,1.883,198,1.541,199,1.883,200,1.883,201,1.883,202,1.883,203,2.887,204,1.883,205,1.883,206,1.883,207,1.883,208,1.883,209,1.883,210,1.883,211,1.883,212,1.883]],["title/interfaces/Coord.html",[135,0.11,144,1.006]],["body/interfaces/Coord.html",[2,0.467,3,0.467,4,0.294,6,0.737,12,0.349,13,1.033,23,0.992,29,0.042,30,0.533,31,0.645,36,0.759,49,1.033,68,1.22,83,1.017,98,0.848,102,0.03,103,0.027,135,0.204,138,0.946,139,0.848,141,1.503,142,1.055,143,2.023,144,1.622,145,1.899,146,1.177,147,1.87,148,1.622,149,1.177,150,1.177,151,1.177,152,1.177,153,1.177,154,1.177,155,1.503,156,1.177,157,1.177,158,1.503,159,1.177,160,1.177,161,1.177,162,1.177,163,1.177,164,1.177,165,1.177,213,1.922]],["title/classes/CurrentService.html",[0,0.721,78,1.784]],["body/classes/CurrentService.html",[0,0.551,2,0.232,3,0.232,4,0.146,6,0.55,12,0.173,13,0.49,14,3.636,15,3.186,16,2.295,17,3.365,18,1.362,19,3.636,21,1.116,22,1.829,23,1.055,25,1.731,26,2.506,28,2.002,29,0.043,30,0.636,31,0.607,32,1.767,36,1.075,37,2.787,45,1.731,48,2.999,49,0.94,50,2.708,52,1.572,54,1.829,56,1.829,58,1.562,60,1.562,62,2.373,65,1.562,66,1.829,68,0.959,69,1.362,70,2.373,71,1.362,72,2.002,73,2.002,76,2.787,77,1.572,78,1.362,80,1.362,83,0.264,84,0.734,85,0.953,86,2.688,87,1.116,88,1.116,94,1.767,98,1.544,101,1.796,102,0.015,103,0.016,110,1.362,111,1.528,139,0.689,143,1.129,166,0.831,176,2.999,180,2.295,198,1.116,213,2.295,214,1.116,215,2.235,216,2.235,217,2.235,218,2.235,219,1.364,220,1.364,221,2.235,222,1.364,223,1.364,224,3.284,225,1.364,226,2.295,227,2.235,228,1.364,229,2.235,230,1.829,231,1.829,232,1.829,233,2.235,234,1.364,235,2.235,236,2.235,237,1.829,238,1.829,239,1.829,240,1.364,241,1.364,242,2.295,243,1.364,244,1.364,245,1.364,246,1.364,247,1.364,248,2.84,249,1.364,250,1.364,251,1.364,252,2.84,253,1.364,254,1.364,255,1.364,256,2.84,257,2.84,258,1.364,259,1.364,260,1.364]],["title/classes/Forecast.html",[0,0.721,261,1.784]],["body/classes/Forecast.html",[0,1.267,2,0.747,3,0.747,4,0.471,29,0.04,102,0.035,103,0.037,261,3.135,262,3.6]],["title/interfaces/ListData.html",[135,0.11,263,1.784]],["body/interfaces/ListData.html",[2,0.665,3,0.665,4,0.419,6,0.758,12,0.496,13,1.05,23,1.004,29,0.041,31,0.708,49,0.857,50,2.386,83,0.758,102,0.033,103,0.034,106,3.777,135,0.194,138,1.346,263,2.923,264,3.204,265,3.204,266,3.915,267,4.423]],["title/interfaces/Location.html",[98,0.902,135,0.11]],["body/interfaces/Location.html",[2,0.657,3,0.657,4,0.414,6,0.748,12,0.49,13,1.129,29,0.04,31,0.703,68,1.361,83,0.748,98,1.59,102,0.033,103,0.034,135,0.193,143,1.935,145,2.119,213,2.702,268,3.164]],["title/interfaces/Main.html",[135,0.11,148,1.006]],["body/interfaces/Main.html",[2,0.449,3,0.449,4,0.283,6,0.511,12,0.335,13,0.936,23,0.979,29,0.042,30,0.511,31,0.747,36,0.729,49,1.015,68,0.651,83,1.005,102,0.03,103,0.027,135,0.198,138,0.908,139,0.814,141,1.47,142,1.013,143,2.037,144,1.47,145,1.013,146,1.13,147,1.829,148,1.678,149,1.13,150,1.983,151,1.983,152,1.983,153,1.983,154,1.983,155,1.47,156,1.13,157,1.13,158,1.47,159,1.13,160,1.13,161,1.13,162,1.13,163,1.13,164,1.13,165,1.13]],["title/interfaces/Result.html",[102,0.02,135,0.11]],["body/interfaces/Result.html",[2,0.394,3,0.394,4,0.248,6,0.449,12,0.294,13,0.871,23,1.027,29,0.042,30,0.845,31,0.81,36,0.639,49,1.143,68,0.571,83,0.967,102,0.03,103,0.024,135,0.192,138,0.797,139,0.714,141,1.761,142,0.888,143,2.009,144,1.761,145,0.888,146,0.991,147,2.072,148,1.795,149,0.991,150,0.991,151,0.991,152,0.991,153,0.991,154,0.991,155,1.761,156,0.991,157,0.991,158,1.761,159,0.991,160,0.991,161,0.991,162,1.868,163,1.868,164,1.868,165,1.868]],["title/interfaces/Sys.html",[135,0.11,158,1.006]],["body/interfaces/Sys.html",[2,0.44,3,0.44,4,0.277,6,0.501,12,0.328,13,0.926,23,1.021,29,0.042,30,0.501,31,0.803,36,0.715,49,1.006,68,0.638,83,1,102,0.029,103,0.026,135,0.197,138,0.89,139,1.416,141,1.454,142,0.993,143,2.034,144,1.454,145,0.993,146,1.108,147,2.15,148,1.58,149,1.108,150,1.108,151,1.108,152,1.108,153,1.108,154,1.108,155,1.454,156,1.108,157,1.108,158,1.58,159,1.965,160,1.965,161,1.965,162,1.108,163,1.108,164,1.108,165,1.108]],["title/interfaces/Weather.html",[49,0.641,135,0.11]],["body/interfaces/Weather.html",[2,0.45,3,0.45,4,0.283,6,0.946,12,0.336,13,1.016,23,1.078,29,0.042,30,0.513,31,0.721,36,1.024,49,1.109,68,0.652,83,1.006,102,0.03,103,0.027,135,0.199,138,1.276,139,0.817,141,1.472,142,1.015,143,2.007,144,1.472,145,1.015,146,1.587,147,2.166,148,1.787,149,1.985,150,1.133,151,1.133,152,1.133,153,1.133,154,1.133,155,1.472,156,1.133,157,1.133,158,1.472,159,1.133,160,1.133,161,1.133,162,1.133,163,1.133,164,1.133,165,1.133]],["title/interfaces/Wind.html",[135,0.11,155,1.006]],["body/interfaces/Wind.html",[2,0.477,3,0.477,4,0.301,6,0.544,12,0.356,13,0.968,23,0.998,29,0.042,30,0.544,31,0.652,36,0.775,49,1.042,68,0.692,83,1.023,102,0.03,103,0.028,135,0.201,138,0.966,139,0.866,141,1.519,142,1.077,143,2.027,144,1.519,145,1.077,146,1.202,147,1.89,148,1.636,149,1.202,150,1.202,151,1.202,152,1.202,153,1.202,154,1.202,155,1.636,156,2.036,157,2.036,158,1.519,159,1.202,160,1.202,161,1.202,162,1.202,163,1.202,164,1.202,165,1.202]],["title/coverage.html",[269,3.252]],["body/coverage.html",[0,1.236,1,1.739,4,0.305,5,2.335,9,1.739,29,0.042,31,0.421,49,0.625,78,1.739,95,1.739,98,0.88,101,1.094,102,0.031,103,0.028,104,1.993,105,2.335,112,1.993,133,4.535,135,0.208,136,2.335,141,0.981,142,2.034,144,0.981,148,0.981,155,0.981,158,0.981,166,1.739,167,2.335,192,1.993,214,2.335,242,1.993,261,1.739,262,2.335,263,1.739,264,2.335,268,2.335,269,2.335,270,2.335,271,2.852,272,2.852,273,2.335,274,3.347,275,5.016,276,2.852,277,4.453,278,4.453,279,2.852,280,2.852,281,2.852,282,3.905,283,3.905,284,2.852,285,2.852,286,2.852,287,3.905,288,3.905,289,2.852,290,2.852,291,2.335,292,2.335,293,2.335,294,2.335,295,2.852,296,2.852]],["title/dependencies.html",[55,2.456,297,2.454]],["body/dependencies.html",[29,0.04,55,3.164,80,2.76,102,0.036,103,0.038,298,4.528]],["title/miscellaneous/enumerations.html",[299,1.495,300,2.876]],["body/miscellaneous/enumerations.html",[12,0.53,29,0.041,52,2.389,98,1.539,101,1.914,102,0.034,103,0.036,111,2.871,299,2.548,300,3.421,301,4.99,302,4.18,303,4.99,304,4.18]],["title/index.html",[12,0.311,305,2.008,306,2.008]],["body/index.html",[1,1.896,4,0.222,9,3.024,11,1.452,25,1.266,29,0.042,30,0.402,35,2.546,36,0.573,39,1.118,40,1.452,41,1.452,42,1.452,48,1.452,49,0.681,50,2.703,52,0.995,62,2.703,68,0.766,69,1.896,70,1.896,71,1.266,72,2.524,73,2.524,77,1.489,84,1.118,93,1.7,94,2.228,95,1.896,98,0.641,101,0.797,102,0.021,103,0.022,121,2.606,122,2.546,131,3.052,176,2.174,180,1.452,226,1.452,261,1.266,307,3.111,308,2.077,309,3.111,310,2.077,311,2.077,312,2.077,313,2.077,314,2.077,315,2.077,316,1.7,317,2.077,318,2.077,319,2.077,320,2.077,321,2.077,322,2.077,323,3.111,324,2.546,325,3.111,326,2.077,327,2.077,328,2.077,329,2.077,330,2.077,331,2.077,332,2.077,333,2.077,334,1.7,335,2.077,336,3.111,337,1.7,338,2.077,339,2.077,340,2.077,341,2.077,342,2.077,343,2.077,344,2.077,345,3.729,346,3.729,347,3.729,348,3.729,349,3.729,350,2.077,351,2.077,352,2.077,353,2.077,354,4.14,355,4.14,356,4.654,357,3.111,358,2.546,359,4.14,360,3.111,361,3.111,362,4.14,363,3.111,364,3.111,365,3.729,366,3.111,367,4.654,368,3.111,369,3.111,370,1.7,371,3.111,372,2.077,373,2.077,374,2.077,375,2.077,376,2.077,377,2.077,378,2.077,379,2.077,380,3.111,381,3.111,382,2.077,383,1.452,384,1.7]],["title/license.html",[305,2.008,306,2.008,383,1.715]],["body/license.html",[4,0.334,29,0.03,39,2.234,102,0.029,103,0.03,265,2.555,270,2.555,324,2.555,334,2.555,358,3.816,370,2.555,383,2.182,384,2.555,385,4.662,386,3.122,387,2.555,388,3.122,389,3.122,390,3.122,391,4.151,392,3.122,393,3.122,394,3.122,395,3.122,396,4.151,397,4.969,398,5.58,399,3.122,400,4.151,401,4.662,402,3.122,403,4.151,404,3.122,405,3.122,406,3.122,407,3.122,408,3.122,409,3.122,410,3.122,411,3.122,412,3.122,413,3.122,414,3.122,415,3.122,416,3.122,417,4.151,418,4.151,419,3.122,420,3.122,421,3.122,422,4.151,423,3.122,424,3.122,425,3.122,426,3.122,427,3.122,428,3.122,429,3.122,430,3.122,431,3.122,432,3.122,433,3.122,434,3.122,435,3.122,436,3.122,437,3.122,438,3.122,439,3.122,440,3.122,441,3.122,442,3.122,443,3.122,444,3.122,445,3.122]],["title/modules.html",[446,3.252]],["body/modules.html",[29,0.038,102,0.036,103,0.038,446,3.761]],["title/overview.html",[447,3.252]],["body/overview.html",[0,1.11,29,0.037,102,0.036,103,0.037,135,0.169,316,3.688,447,3.688,448,4.506]],["title/miscellaneous/variables.html",[274,2.456,299,1.495]],["body/miscellaneous/variables.html",[9,2.613,12,0.337,23,0.72,29,0.043,30,0.947,31,0.633,52,2.341,58,2.597,68,1.204,69,1.619,70,2.98,71,1.619,72,1.619,73,1.619,84,1.429,85,1.856,95,1.619,98,1.507,102,0.026,103,0.027,106,1.856,110,2.831,111,2.5,112,2.997,139,1.507,192,2.997,226,1.856,230,2.174,231,2.174,232,2.174,237,2.174,238,2.174,239,2.174,242,2.997,263,2.265,267,2.174,273,3.042,274,1.856,291,2.174,292,3.042,293,2.174,294,2.174,299,1.619,337,3.801,387,2.174,449,2.656,450,2.656,451,2.656,452,2.656,453,2.656,454,2.656,455,3.717,456,2.656,457,2.656,458,2.656,459,2.656,460,2.656,461,2.656,462,2.656,463,2.656,464,2.656,465,2.656,466,2.656]],["title/routes.html",[467,3.252]],["body/routes.html",[29,0.038,102,0.036,103,0.038,467,3.761]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"classes/Forecast.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":133,"title":{},"body":{"classes/CitiesService.html":{},"coverage.html":{}}}],["0.18.0",{"_index":298,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":275,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":280,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":276,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":284,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":279,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":281,"title":{},"body":{"coverage.html":{}}}],["08026",{"_index":237,"title":{},"body":{"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":58,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["1/3",{"_index":278,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":283,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":448,"title":{},"body":{"overview.html":{}}}],["11",{"_index":465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["115.13982959999998",{"_index":71,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["115.13982959999998}]).then",{"_index":353,"title":{},"body":{"index.html":{}}}],["12.496365500000024",{"_index":231,"title":{},"body":{"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["2.186880111694336",{"_index":457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.3522219000000177",{"_index":462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.94",{"_index":459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20",{"_index":282,"title":{},"body":{"coverage.html":{}}}],["2018",{"_index":387,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["26",{"_index":466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":318,"title":{},"body":{"index.html":{}}}],["3/5",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":290,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":277,"title":{},"body":{"coverage.html":{}}}],["36.1699412",{"_index":69,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["37",{"_index":289,"title":{},"body":{"coverage.html":{}}}],["39;89104&#39",{"_index":75,"title":{},"body":{"classes/ApiService.html":{}}}],["39;madrid,es&#39",{"_index":64,"title":{},"body":{"classes/ApiService.html":{}}}],["41.40340260589794",{"_index":456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["41.9027835",{"_index":230,"title":{},"body":{"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["43.26",{"_index":458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["48.856614",{"_index":461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["48002",{"_index":239,"title":{},"body":{"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["48104",{"_index":236,"title":{},"body":{"classes/CurrentService.html":{}}}],["5",{"_index":316,"title":{},"body":{"index.html":{},"overview.html":{}}}],["5/6",{"_index":286,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["75006",{"_index":463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["83",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["89104",{"_index":93,"title":{},"body":{"classes/ApiService.html":{},"index.html":{}}}],["89104']).then",{"_index":351,"title":{},"body":{"index.html":{}}}],["abov",{"_index":416,"title":{},"body":{"license.html":{}}}],["access_token",{"_index":202,"title":{},"body":{"classes/ConfigService.html":{}}}],["access_token=xxxxx%20xxxxx",{"_index":205,"title":{},"body":{"classes/ConfigService.html":{}}}],["action",{"_index":439,"title":{},"body":{"license.html":{}}}],["add",{"_index":176,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["agent",{"_index":207,"title":{},"body":{"classes/ConfigService.html":{}}}],["and/or",{"_index":410,"title":{},"body":{"license.html":{}}}],["angular",{"_index":370,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular/src/angular",{"_index":374,"title":{},"body":{"index.html":{}}}],["api",{"_index":9,"title":{},"body":{"classes/ApiService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api.getcurrentweather('c",{"_index":343,"title":{},"body":{"index.html":{}}}],["api.getcurrentweather('loc",{"_index":352,"title":{},"body":{"index.html":{}}}],["api.getcurrentweather('zip",{"_index":350,"title":{},"body":{"index.html":{}}}],["api/config.servic",{"_index":240,"title":{},"body":{"classes/CurrentService.html":{}}}],["api_url",{"_index":242,"title":{},"body":{"classes/CurrentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apigener",{"_index":326,"title":{},"body":{"index.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["apiservic",{"_index":1,"title":{"classes/ApiService.html":{}},"body":{"classes/ApiService.html":{},"coverage.html":{},"index.html":{}}}],["apiservice('ec32f42ea9357dae4e8e8dbc6d0f77f9",{"_index":452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiservice('your_api_key",{"_index":336,"title":{},"body":{"index.html":{}}}],["applic",{"_index":361,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":82,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{}}}],["aris",{"_index":443,"title":{},"body":{"license.html":{}}}],["array",{"_index":46,"title":{},"body":{"classes/ApiService.html":{}}}],["associ",{"_index":399,"title":{},"body":{"license.html":{}}}],["async",{"_index":19,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["author",{"_index":432,"title":{},"body":{"license.html":{}}}],["automat",{"_index":210,"title":{},"body":{"classes/ConfigService.html":{}}}],["avail",{"_index":117,"title":{},"body":{"classes/CitiesService.html":{}}}],["available_lang",{"_index":192,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available_langs.find",{"_index":197,"title":{},"body":{"classes/ConfigService.html":{}}}],["axio",{"_index":80,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"dependencies.html":{}}}],["axios.defaults.headers.get['cont",{"_index":200,"title":{},"body":{"classes/ConfigService.html":{}}}],["axios.defaults.headers.post['cont",{"_index":81,"title":{},"body":{"classes/ApiService.html":{}}}],["axios.get(url).then",{"_index":256,"title":{},"body":{"classes/CurrentService.html":{}}}],["barcelona",{"_index":226,"title":{},"body":{"classes/CurrentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["barcelona,",{"_index":312,"title":{},"body":{"index.html":{}}}],["barcelona,es']).then",{"_index":344,"title":{},"body":{"index.html":{}}}],["base",{"_index":162,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["basic",{"_index":309,"title":{},"body":{"index.html":{}}}],["bilbao",{"_index":238,"title":{},"body":{"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["bilbao,",{"_index":314,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":115,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["build",{"_index":354,"title":{},"body":{"index.html":{}}}],["c",{"_index":386,"title":{},"body":{"license.html":{}}}],["ca",{"_index":454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catala",{"_index":184,"title":{},"body":{"classes/ConfigService.html":{}}}],["celsiu",{"_index":189,"title":{},"body":{"classes/ConfigService.html":{}}}],["charg",{"_index":395,"title":{},"body":{"license.html":{}}}],["check.t",{"_index":273,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["citi",{"_index":101,"title":{"interfaces/City.html":{}},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"classes/CurrentService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["cities_list",{"_index":112,"title":{},"body":{"classes/CitiesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["citiesservic",{"_index":104,"title":{"classes/CitiesService.html":{}},"body":{"classes/CitiesService.html":{},"coverage.html":{}}}],["city.nam",{"_index":134,"title":{},"body":{"classes/CitiesService.html":{}}}],["claim",{"_index":435,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"classes/Forecast.html":{}},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"classes/Forecast.html":{},"coverage.html":{},"overview.html":{}}}],["cli",{"_index":375,"title":{},"body":{"index.html":{}}}],["client",{"_index":360,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":141,"title":{"interfaces/Clouds.html":{}},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{}}}],["cod",{"_index":165,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["code",{"_index":180,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["condit",{"_index":415,"title":{},"body":{"license.html":{}}}],["configs/browser.j",{"_index":377,"title":{},"body":{"index.html":{}}}],["configservic",{"_index":166,"title":{"classes/ConfigService.html":{}},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{},"coverage.html":{}}}],["configservice.options(jsonformat",{"_index":255,"title":{},"body":{"classes/CurrentService.html":{}}}],["configservice.setlanguage(lang",{"_index":245,"title":{},"body":{"classes/CurrentService.html":{}}}],["configservice.setunitmetric(unitmetr",{"_index":244,"title":{},"body":{"classes/CurrentService.html":{}}}],["configur",{"_index":362,"title":{},"body":{"index.html":{}}}],["connect",{"_index":445,"title":{},"body":{"license.html":{}}}],["consol",{"_index":349,"title":{},"body":{"index.html":{}}}],["console.error(err",{"_index":347,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":131,"title":{},"body":{"classes/CitiesService.html":{},"index.html":{}}}],["console.log(data",{"_index":345,"title":{},"body":{"index.html":{}}}],["const",{"_index":94,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["constants/c",{"_index":128,"title":{},"body":{"classes/CitiesService.html":{}}}],["constants/environ",{"_index":243,"title":{},"body":{"classes/CurrentService.html":{}}}],["constants/languag",{"_index":193,"title":{},"body":{"classes/ConfigService.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["constructor(apikey",{"_index":22,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["contain",{"_index":57,"title":{},"body":{"classes/ApiService.html":{}}}],["contract",{"_index":440,"title":{},"body":{"license.html":{}}}],["coord",{"_index":144,"title":{"interfaces/Coord.html":{}},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{}}}],["coordin",{"_index":213,"title":{},"body":{"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/Location.html":{}}}],["copi",{"_index":397,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":385,"title":{},"body":{"license.html":{}}}],["countri",{"_index":139,"title":{},"body":{"interfaces/City.html":{},"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"miscellaneous/variables.html":{}}}],["cours",{"_index":388,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":269,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":48,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["current.getbycity(param[0]).then(data",{"_index":100,"title":{},"body":{"classes/ApiService.html":{}}}],["current.getbylocation(param[0]).then(data",{"_index":99,"title":{},"body":{"classes/ApiService.html":{}}}],["current.getbyzip(param[0]).then(data",{"_index":97,"title":{},"body":{"classes/ApiService.html":{}}}],["currentservic",{"_index":78,"title":{"classes/CurrentService.html":{}},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"coverage.html":{}}}],["currentservice(this.apikey",{"_index":96,"title":{},"body":{"classes/ApiService.html":{}}}],["damag",{"_index":436,"title":{},"body":{"license.html":{}}}],["data",{"_index":50,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"interfaces/ListData.html":{},"index.html":{}}}],["data.data",{"_index":257,"title":{},"body":{"classes/CurrentService.html":{}}}],["day",{"_index":317,"title":{},"body":{"index.html":{}}}],["deal",{"_index":400,"title":{},"body":{"license.html":{}}}],["default",{"_index":110,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":26,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["definit",{"_index":138,"title":{},"body":{"interfaces/City.html":{},"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/ListData.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["deg",{"_index":157,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["depend",{"_index":55,"title":{"dependencies.html":{}},"body":{"classes/ApiService.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["devkit/build",{"_index":373,"title":{},"body":{"index.html":{}}}],["differ",{"_index":10,"title":{},"body":{"classes/ApiService.html":{}}}],["dist",{"_index":327,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":408,"title":{},"body":{"license.html":{}}}],["document",{"_index":270,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dt",{"_index":164,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["empti",{"_index":367,"title":{},"body":{"index.html":{}}}],["en",{"_index":85,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":378,"title":{},"body":{"index.html":{}}}],["englishhow",{"_index":342,"title":{},"body":{"index.html":{}}}],["enumer",{"_index":300,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":346,"title":{},"body":{"index.html":{}}}],["error",{"_index":348,"title":{},"body":{"index.html":{}}}],["es",{"_index":337,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["event",{"_index":431,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":62,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["exist",{"_index":126,"title":{},"body":{"classes/CitiesService.html":{}}}],["export",{"_index":83,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["express",{"_index":424,"title":{},"body":{"license.html":{}}}],["extraplugin",{"_index":381,"title":{},"body":{"index.html":{}}}],["fals",{"_index":382,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"classes/Forecast.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["files/models/webpack",{"_index":376,"title":{},"body":{"index.html":{}}}],["filter",{"_index":53,"title":{},"body":{"classes/ApiService.html":{}}}],["find",{"_index":54,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["findtyp",{"_index":301,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["findvalu",{"_index":248,"title":{},"body":{"classes/CurrentService.html":{}}}],["first",{"_index":61,"title":{},"body":{"classes/ApiService.html":{}}}],["fit",{"_index":427,"title":{},"body":{"license.html":{}}}],["follow",{"_index":334,"title":{},"body":{"index.html":{},"license.html":{}}}],["forecast",{"_index":261,"title":{"classes/Forecast.html":{}},"body":{"classes/Forecast.html":{},"coverage.html":{},"index.html":{}}}],["format",{"_index":60,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["fr",{"_index":455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":394,"title":{},"body":{"license.html":{}}}],["fs",{"_index":366,"title":{},"body":{"index.html":{}}}],["function",{"_index":310,"title":{},"body":{"index.html":{}}}],["furnish",{"_index":413,"title":{},"body":{"license.html":{}}}],["get",{"_index":305,"title":{"index.html":{},"license.html":{}},"body":{}}],["getbyc",{"_index":215,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(&#39;barcelona&#39",{"_index":225,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(&#39;madrid,es&#39",{"_index":223,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity('barcelona",{"_index":247,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity('madrid,",{"_index":246,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbycity(c",{"_index":221,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyloc",{"_index":216,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbylocation(loc",{"_index":227,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyzip",{"_index":217,"title":{},"body":{"classes/CurrentService.html":{}}}],["getbyzip(zipcod",{"_index":233,"title":{},"body":{"classes/CurrentService.html":{}}}],["getcurrentweath",{"_index":20,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;city&#39",{"_index":63,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;location&#39",{"_index":67,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(&#39;zip&#39",{"_index":74,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('c",{"_index":89,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('loc",{"_index":91,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather('zip",{"_index":92,"title":{},"body":{"classes/ApiService.html":{}}}],["getcurrentweather(typ",{"_index":44,"title":{},"body":{"classes/ApiService.html":{}}}],["getlist",{"_index":107,"title":{},"body":{"classes/CitiesService.html":{}}}],["getlist(json",{"_index":114,"title":{},"body":{"classes/CitiesService.html":{}}}],["go",{"_index":371,"title":{},"body":{"index.html":{}}}],["grant",{"_index":393,"title":{},"body":{"license.html":{}}}],["gt",{"_index":65,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["header",{"_index":177,"title":{},"body":{"classes/ConfigService.html":{}}}],["herebi",{"_index":392,"title":{},"body":{"license.html":{}}}],["holder",{"_index":433,"title":{},"body":{"license.html":{}}}],["hour",{"_index":319,"title":{},"body":{"index.html":{}}}],["http",{"_index":209,"title":{},"body":{"classes/ConfigService.html":{}}}],["https://api.openweathermap.org/data/2.5",{"_index":453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["humid",{"_index":152,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["icon",{"_index":149,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["id",{"_index":147,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["identifi",{"_index":271,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":322,"title":{},"body":{"index.html":{}}}],["impli",{"_index":425,"title":{},"body":{"license.html":{}}}],["import",{"_index":77,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["includ",{"_index":358,"title":{},"body":{"index.html":{},"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"classes/Forecast.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["inform",{"_index":146,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["input",{"_index":56,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["insid",{"_index":359,"title":{},"body":{"index.html":{}}}],["instal",{"_index":323,"title":{},"body":{"index.html":{}}}],["interfac",{"_index":135,"title":{"interfaces/City.html":{},"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}},"body":{"interfaces/City.html":{},"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces/location.interfac",{"_index":241,"title":{},"body":{"classes/CurrentService.html":{}}}],["javascript",{"_index":338,"title":{},"body":{"index.html":{}}}],["js",{"_index":389,"title":{},"body":{"license.html":{}}}],["json",{"_index":118,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["json.stringify(this.list['list",{"_index":130,"title":{},"body":{"classes/CitiesService.html":{}}}],["jsonvalu",{"_index":174,"title":{},"body":{"classes/ConfigService.html":{}}}],["kelvin",{"_index":190,"title":{},"body":{"classes/ConfigService.html":{}}}],["key",{"_index":35,"title":{},"body":{"classes/ApiService.html":{},"index.html":{}}}],["kind",{"_index":423,"title":{},"body":{"license.html":{}}}],["la",{"_index":72,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["lang",{"_index":25,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{}}}],["lang=${languag",{"_index":199,"title":{},"body":{"classes/ConfigService.html":{}}}],["languag",{"_index":16,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["last_upd",{"_index":267,"title":{},"body":{"interfaces/ListData.html":{},"miscellaneous/variables.html":{}}}],["lat",{"_index":68,"title":{},"body":{"classes/ApiService.html":{},"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["lat=${location.lat}&lon=${location.lon",{"_index":258,"title":{},"body":{"classes/CurrentService.html":{}}}],["liabil",{"_index":437,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":434,"title":{},"body":{"license.html":{}}}],["lib",{"_index":339,"title":{},"body":{"index.html":{}}}],["lib.apiservic",{"_index":341,"title":{},"body":{"index.html":{}}}],["lib/.../citi",{"_index":451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../environments.t",{"_index":449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../find",{"_index":302,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../languages.t",{"_index":450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/classes/enums/find",{"_index":304,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/classes/interfaces/api.interface.t",{"_index":142,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{}}}],["lib/classes/interfaces/city.interface.t",{"_index":136,"title":{},"body":{"interfaces/City.html":{},"coverage.html":{}}}],["lib/classes/interfaces/list.interface.t",{"_index":264,"title":{},"body":{"interfaces/ListData.html":{},"coverage.html":{}}}],["lib/classes/interfaces/location.interface.t",{"_index":268,"title":{},"body":{"interfaces/Location.html":{},"coverage.html":{}}}],["lib/classes/services/api/api.service.t",{"_index":5,"title":{},"body":{"classes/ApiService.html":{},"coverage.html":{}}}],["lib/classes/services/api/api.service.ts:12",{"_index":33,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:16",{"_index":38,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:20",{"_index":27,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/api.service.ts:35",{"_index":47,"title":{},"body":{"classes/ApiService.html":{}}}],["lib/classes/services/api/config.service.t",{"_index":167,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{}}}],["lib/classes/services/api/config.service.ts:23",{"_index":179,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:35",{"_index":175,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:39",{"_index":173,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/api/config.service.ts:9",{"_index":186,"title":{},"body":{"classes/ConfigService.html":{}}}],["lib/classes/services/cities.service.t",{"_index":105,"title":{},"body":{"classes/CitiesService.html":{},"coverage.html":{}}}],["lib/classes/services/cities.service.ts:18",{"_index":120,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:3",{"_index":113,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:31",{"_index":125,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/cities.service.ts:8",{"_index":116,"title":{},"body":{"classes/CitiesService.html":{}}}],["lib/classes/services/weather/current.service.t",{"_index":214,"title":{},"body":{"classes/CurrentService.html":{},"coverage.html":{}}}],["lib/classes/services/weather/current.service.ts:23",{"_index":222,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:46",{"_index":228,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:62",{"_index":234,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:7",{"_index":219,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:8",{"_index":220,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/current.service.ts:9",{"_index":218,"title":{},"body":{"classes/CurrentService.html":{}}}],["lib/classes/services/weather/forecast.service.t",{"_index":262,"title":{},"body":{"classes/Forecast.html":{},"coverage.html":{}}}],["lib/constants/c",{"_index":291,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/constants/environments.t",{"_index":293,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/constants/languages.t",{"_index":294,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["librari",{"_index":122,"title":{},"body":{"classes/CitiesService.html":{},"index.html":{}}}],["licens",{"_index":383,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":403,"title":{},"body":{"license.html":{}}}],["list",{"_index":106,"title":{},"body":{"classes/CitiesService.html":{},"interfaces/ListData.html":{},"miscellaneous/variables.html":{}}}],["list.t",{"_index":292,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["listdata",{"_index":263,"title":{"interfaces/ListData.html":{}},"body":{"interfaces/ListData.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lng",{"_index":70,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["locat",{"_index":98,"title":{"interfaces/Location.html":{}},"body":{"classes/ApiService.html":{},"interfaces/City.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/Location.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["location.interfac",{"_index":140,"title":{},"body":{"interfaces/City.html":{}}}],["locaton",{"_index":51,"title":{},"body":{"classes/ApiService.html":{}}}],["lon",{"_index":145,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["m",{"_index":84,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["madrid",{"_index":66,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["madrid,",{"_index":90,"title":{},"body":{"classes/ApiService.html":{}}}],["main",{"_index":148,"title":{"interfaces/Main.html":{}},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{}}}],["manag",{"_index":8,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{}}}],["match",{"_index":103,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"classes/Forecast.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["merchant",{"_index":426,"title":{},"body":{"license.html":{}}}],["merg",{"_index":406,"title":{},"body":{"license.html":{}}}],["messag",{"_index":159,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["method",{"_index":18,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["metr",{"_index":42,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["metric",{"_index":41,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["mill",{"_index":43,"title":{},"body":{"classes/ApiService.html":{}}}],["miscellan",{"_index":299,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":384,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":405,"title":{},"body":{"license.html":{}}}],["modul",{"_index":446,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":266,"title":{},"body":{"interfaces/ListData.html":{}}}],["mugan86/openweath",{"_index":325,"title":{},"body":{"index.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":34,"title":{},"body":{"classes/ApiService.html":{}}}],["net",{"_index":368,"title":{},"body":{"index.html":{}}}],["new",{"_index":95,"title":{},"body":{"classes/ApiService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":315,"title":{},"body":{"index.html":{}}}],["node",{"_index":365,"title":{},"body":{"index.html":{}}}],["node_modules/@angular",{"_index":372,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":430,"title":{},"body":{"license.html":{}}}],["notic",{"_index":417,"title":{},"body":{"license.html":{}}}],["npm",{"_index":324,"title":{},"body":{"index.html":{},"license.html":{}}}],["null",{"_index":249,"title":{},"body":{"classes/CurrentService.html":{}}}],["number",{"_index":143,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["object",{"_index":127,"title":{},"body":{"classes/CitiesService.html":{}}}],["obtain",{"_index":265,"title":{},"body":{"interfaces/ListData.html":{},"license.html":{}}}],["on",{"_index":137,"title":{},"body":{"interfaces/City.html":{}}}],["openweath",{"_index":307,"title":{},"body":{"index.html":{}}}],["openweathermap",{"_index":333,"title":{},"body":{"index.html":{}}}],["option",{"_index":32,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["options(jsonvalu",{"_index":172,"title":{},"body":{"classes/ConfigService.html":{}}}],["otherwis",{"_index":442,"title":{},"body":{"license.html":{}}}],["out",{"_index":444,"title":{},"body":{"license.html":{}}}],["overview",{"_index":447,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":297,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":45,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["paramet",{"_index":28,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["pari",{"_index":460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paris,fr",{"_index":313,"title":{},"body":{"index.html":{}}}],["pars",{"_index":211,"title":{},"body":{"classes/ConfigService.html":{}}}],["particular",{"_index":428,"title":{},"body":{"license.html":{}}}],["pend",{"_index":321,"title":{},"body":{"index.html":{}}}],["period",{"_index":320,"title":{},"body":{"index.html":{}}}],["permiss",{"_index":391,"title":{},"body":{"license.html":{}}}],["permit",{"_index":412,"title":{},"body":{"license.html":{}}}],["person",{"_index":396,"title":{},"body":{"license.html":{}}}],["place",{"_index":229,"title":{},"body":{"classes/CurrentService.html":{}}}],["plugin",{"_index":380,"title":{},"body":{"index.html":{}}}],["portion",{"_index":420,"title":{},"body":{"license.html":{}}}],["posit",{"_index":59,"title":{},"body":{"classes/ApiService.html":{}}}],["pressur",{"_index":151,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["printcitieslist",{"_index":108,"title":{},"body":{"classes/CitiesService.html":{}}}],["privat",{"_index":14,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["project",{"_index":355,"title":{},"body":{"index.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["provid",{"_index":421,"title":{},"body":{"license.html":{}}}],["public",{"_index":194,"title":{},"body":{"classes/ConfigService.html":{}}}],["publish",{"_index":407,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":429,"title":{},"body":{"license.html":{}}}],["q=${citi",{"_index":251,"title":{},"body":{"classes/CurrentService.html":{}}}],["q=london,uk",{"_index":250,"title":{},"body":{"classes/CurrentService.html":{}}}],["qs",{"_index":201,"title":{},"body":{"classes/ConfigService.html":{}}}],["regist",{"_index":332,"title":{},"body":{"index.html":{}}}],["replac",{"_index":379,"title":{},"body":{"index.html":{}}}],["request",{"_index":11,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["require('@mugan86/openweath",{"_index":340,"title":{},"body":{"index.html":{}}}],["respons",{"_index":212,"title":{},"body":{"classes/ConfigService.html":{}}}],["restrict",{"_index":402,"title":{},"body":{"license.html":{}}}],["result",{"_index":102,"title":{"interfaces/Result.html":{}},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"classes/Forecast.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["return",{"_index":76,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["right",{"_index":404,"title":{},"body":{"license.html":{}}}],["roma",{"_index":232,"title":{},"body":{"classes/CurrentService.html":{},"miscellaneous/variables.html":{}}}],["roma,it",{"_index":311,"title":{},"body":{"index.html":{}}}],["rout",{"_index":467,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":328,"title":{},"body":{"index.html":{}}}],["rx",{"_index":208,"title":{},"body":{"classes/ConfigService.html":{}}}],["rxhr.get(url",{"_index":254,"title":{},"body":{"classes/CurrentService.html":{}}}],["select",{"_index":37,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["selectc",{"_index":109,"title":{},"body":{"classes/CitiesService.html":{}}}],["selectcity(nam",{"_index":124,"title":{},"body":{"classes/CitiesService.html":{}}}],["sell",{"_index":411,"title":{},"body":{"license.html":{}}}],["servic",{"_index":7,"title":{},"body":{"classes/ApiService.html":{}}}],["setjsonformat",{"_index":169,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguag",{"_index":170,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(&#39;ca&#39",{"_index":183,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(&#39;es&#39",{"_index":181,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage('",{"_index":195,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage('ca",{"_index":196,"title":{},"body":{"classes/ConfigService.html":{}}}],["setlanguage(languag",{"_index":178,"title":{},"body":{"classes/ConfigService.html":{}}}],["setunitmetr",{"_index":171,"title":{},"body":{"classes/ConfigService.html":{}}}],["setunitmetric(unit",{"_index":185,"title":{},"body":{"classes/ConfigService.html":{}}}],["shall",{"_index":418,"title":{},"body":{"license.html":{}}}],["show",{"_index":121,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["softwar",{"_index":398,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"classes/Forecast.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["spain",{"_index":224,"title":{},"body":{"classes/CurrentService.html":{}}}],["spanish",{"_index":182,"title":{},"body":{"classes/ConfigService.html":{}}}],["speed",{"_index":156,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["standard",{"_index":187,"title":{},"body":{"classes/ConfigService.html":{}}}],["start",{"_index":306,"title":{"index.html":{},"license.html":{}},"body":{}}],["statement",{"_index":272,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":168,"title":{},"body":{"classes/ConfigService.html":{}}}],["string",{"_index":23,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/ListData.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":414,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":409,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":419,"title":{},"body":{"license.html":{}}}],["sunris",{"_index":160,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["sunset",{"_index":161,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["sy",{"_index":158,"title":{"interfaces/Sys.html":{}},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{}}}],["tabl",{"_index":296,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":295,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":36,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"index.html":{}}}],["target",{"_index":363,"title":{},"body":{"index.html":{}}}],["temp",{"_index":150,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["temp_max",{"_index":154,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["temp_min",{"_index":153,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["temperatur",{"_index":188,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.apikey",{"_index":86,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["this.getlist",{"_index":132,"title":{},"body":{"classes/CitiesService.html":{}}}],["this.languag",{"_index":88,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["this.list['list",{"_index":129,"title":{},"body":{"classes/CitiesService.html":{}}}],["this.unitmetr",{"_index":87,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["tl",{"_index":369,"title":{},"body":{"index.html":{}}}],["tort",{"_index":441,"title":{},"body":{"license.html":{}}}],["true",{"_index":119,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["ts",{"_index":390,"title":{},"body":{"license.html":{}}}],["tsc",{"_index":330,"title":{},"body":{"index.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"interfaces/City.html":{},"interfaces/Clouds.html":{},"classes/ConfigService.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/ListData.html":{},"interfaces/Location.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum.t",{"_index":303,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":335,"title":{},"body":{"index.html":{}}}],["uk",{"_index":464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefin",{"_index":198,"title":{},"body":{"classes/ConfigService.html":{},"classes/CurrentService.html":{}}}],["unit",{"_index":40,"title":{},"body":{"classes/ApiService.html":{},"classes/ConfigService.html":{},"index.html":{}}}],["unitmet",{"_index":24,"title":{},"body":{"classes/ApiService.html":{}}}],["unitmetr",{"_index":17,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{}}}],["units=metr",{"_index":191,"title":{},"body":{"classes/ConfigService.html":{}}}],["uri",{"_index":204,"title":{},"body":{"classes/ConfigService.html":{}}}],["url",{"_index":252,"title":{},"body":{"classes/CurrentService.html":{}}}],["us",{"_index":39,"title":{},"body":{"classes/ApiService.html":{},"classes/CitiesService.html":{},"classes/ConfigService.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":206,"title":{},"body":{"classes/ConfigService.html":{}}}],["valu",{"_index":111,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":274,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["vega",{"_index":73,"title":{},"body":{"classes/ApiService.html":{},"classes/CurrentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["visibl",{"_index":163,"title":{},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{}}}],["void",{"_index":123,"title":{},"body":{"classes/CitiesService.html":{},"classes/ConfigService.html":{}}}],["want",{"_index":357,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":422,"title":{},"body":{"license.html":{}}}],["watchor",{"_index":329,"title":{},"body":{"index.html":{}}}],["weather",{"_index":49,"title":{"interfaces/Weather.html":{}},"body":{"classes/ApiService.html":{},"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"classes/CurrentService.html":{},"interfaces/ListData.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{},"index.html":{}}}],["weather/current.servic",{"_index":79,"title":{},"body":{"classes/ApiService.html":{}}}],["weather?${findvalue}${this.unitmetric}${this.language}&appid",{"_index":253,"title":{},"body":{"classes/CurrentService.html":{}}}],["weather?${value}${this.unitmetric}${this.language}&appid",{"_index":259,"title":{},"body":{"classes/CurrentService.html":{}}}],["weather?zip=${zipcode}${this.unitmetric}${this.language}&appid",{"_index":260,"title":{},"body":{"classes/CurrentService.html":{}}}],["web",{"_index":364,"title":{},"body":{"index.html":{}}}],["webpack",{"_index":356,"title":{},"body":{"index.html":{}}}],["whether",{"_index":438,"title":{},"body":{"license.html":{}}}],["wind",{"_index":155,"title":{"interfaces/Wind.html":{}},"body":{"interfaces/Clouds.html":{},"interfaces/Coord.html":{},"interfaces/Main.html":{},"interfaces/Result.html":{},"interfaces/Sys.html":{},"interfaces/Weather.html":{},"interfaces/Wind.html":{},"coverage.html":{}}}],["without",{"_index":401,"title":{},"body":{"license.html":{}}}],["work",{"_index":308,"title":{},"body":{"index.html":{}}}],["wusag",{"_index":331,"title":{},"body":{"index.html":{}}}],["xxxxx",{"_index":203,"title":{},"body":{"classes/ConfigService.html":{}}}],["zip",{"_index":52,"title":{},"body":{"classes/ApiService.html":{},"interfaces/City.html":{},"classes/CurrentService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["zipcod",{"_index":235,"title":{},"body":{"classes/CurrentService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiService.html":{"url":"classes/ApiService.html","title":"class - ApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/api/api.service.ts\n        \n\n            \n                Description\n            \n            \n                Service that manage API differents requests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiKey\n                            \n                            \n                                    Private\n                                language\n                            \n                            \n                                    Private\n                                unitMetric\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCurrentWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apiKey: string, unitMet: string, lang: string)\n                    \n                \n                        \n                            \n                                Defined in lib/classes/services/api/api.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unitMet\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lang\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            apiKey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        apiKey:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:12\n                            \n                        \n\n                \n                    \n                        Need Api Key to take API info\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            language\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        language:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:20\n                            \n                        \n\n                \n                    \n                        select language\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unitMetric\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unitMetric:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:16\n                            \n                        \n\n                \n                    \n                        Property to define use unit metric, metres or milles\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getCurrentWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCurrentWeather(type: string, param: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/api.service.ts:35\n                            \n                        \n\n\n                \n                    \n                            Get current weather data using name, locaton or zip filters.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Filter to use to find weather dependent input data\n\n                                                        \n                                                \n                                                \n                                                        param\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                array with contain 1 position data in any format. In first filter data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            getCurrentWeather(&#39;city&#39;, [&#39;Madrid,es&#39;]) -&gt; Madrid\ngetCurrentWeather(&#39;location&#39;, [{lat: 36.1699412, lng: -115.13982959999998}]) -&gt; Las Vegas\ngetCurrentWeather(&#39;zip&#39;, [&#39;89104&#39;]) -&gt; Las Vegas\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { CurrentService } from './../weather/current.service';\nimport axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\n/**\n * Service that manage API differents requests\n */\nexport class ApiService {\n    /**\n     * Need Api Key to take API info\n     */\n    private apiKey: string;\n    /**\n     * Property to define use unit metric, metres or milles\n     */\n    private unitMetric: string;\n    /**\n     * select language\n     */\n    private language: string;\n    constructor(apiKey: string, unitMet: string = 'm', lang: string = 'en') {\n        this.apiKey = apiKey;\n        this.unitMetric = unitMet;\n        this.language = lang;\n    }\n    /**\n     * Get current weather data using name, locaton or zip filters.\n     * @example\n     * getCurrentWeather('city', ['Madrid,es']) -> Madrid\n     * getCurrentWeather('location', [{lat: 36.1699412, lng: -115.13982959999998}]) -> Las Vegas\n     * getCurrentWeather('zip', ['89104']) -> Las Vegas\n     * @param type Filter to use to find weather dependent input data\n     * @param param array with contain 1 position data in any format. In first filter data\n     */\n    async getCurrentWeather(type: string, param: Array) {\n        const current = new CurrentService(this.apiKey, this.unitMetric, this.language);\n        if (type === 'zip') {\n            return current.getByZip(param[0]).then(data => data);\n        } else if (type === 'location') {\n            return current.getByLocation(param[0]).then(data => data);\n        } \n        return current.getByCity(param[0]).then(data => data); // by city\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesService.html":{"url":"classes/CitiesService.html","title":"class - CitiesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/cities.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getList\n                            \n                            \n                                printCitiesList\n                            \n                            \n                                selectCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            list\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        list:     \n\n                    \n                \n                    \n                        \n                            Default value : CITIES_LIST\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:3\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetList(json: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:8\n                            \n                        \n\n\n                \n                    \n                            Take available cities list\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        json\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                true\n                                                        \n\n                                                        \n                                                                Return in JSON or no. Default \"true\"\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            printCitiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \nprintCitiesList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:18\n                            \n                        \n\n\n                \n                    \n                            Show cities list available in library by default\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectCity(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/cities.service.ts:31\n                            \n                        \n\n\n                \n                    \n                            Use exist List in library to take select city object info\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Name of city to take all info\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { CITIES_LIST } from './../../constants/cities-list';\nexport class CitiesService {\n    list = CITIES_LIST;\n    /**\n     * Take available cities list\n     * @param json Return in JSON or no. Default \"true\"\n     */\n    getList(json: boolean = true) {\n        if (json) {\n            return this.list['list'];\n        }\n        return JSON.stringify(this.list['list']);\n    }\n\n    /**\n     * Show cities list available in library by default\n     */\n    printCitiesList() {\n        console.log('********************************');\n        const cities = this.getList();\n        for (let i = 0; i  city.name === name );\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/City.html":{"url":"interfaces/City.html","title":"interface - City","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  City\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/city.interface.ts\n        \n\n            \n                Description\n            \n            \n                One city interface definition\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        country\n                                \n                                \n                                        location\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        zip\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:     Location\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Location\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zip\n                                    \n                                \n                                \n                                    \n                                        zip:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Location } from './location.interface';\n\n/**\n * One city interface definition\n */\nexport interface City {\n    name: string;\n    country: string;\n    location: Location;\n    zip?: string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Clouds.html":{"url":"interfaces/Clouds.html","title":"interface - Clouds","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Clouds\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/api.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        all\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        all\n                                    \n                                \n                                \n                                    \n                                        all:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Coord {\n    lon: number;\n    lat: number;\n}\n\n/**\n * Take weather information properties definition\n */\nexport interface Weather {\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n}\n\nexport interface Main {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n}\n\nexport interface Wind {\n    speed: number;\n    deg: number;\n}\n\nexport interface Clouds {\n    all: number;\n}\n\nexport interface Sys {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n}\n\nexport interface Result {\n    coord: Coord;\n    weather: Weather[];\n    base: string;\n    main: Main;\n    visibility: number;\n    wind: Wind;\n    clouds: Clouds;\n    dt: number;\n    sys: Sys;\n    id: number;\n    name: string;\n    cod: number;\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/api/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                options\n                            \n                            \n                                    Static\n                                setJsonFormat\n                            \n                            \n                                    Static\n                                setLanguage\n                            \n                            \n                                    Static\n                                setUnitMetric\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            options\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        options(jsonValue: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        jsonValue\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                true\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     { json: boolean; }\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setJsonFormat\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setJsonFormat()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:35\n                            \n                        \n\n\n                \n                    \n                            Add headers in JSON Format\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setLanguage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setLanguage(language: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:23\n                            \n                        \n\n\n                \n                    \n                            Define default language use to show description in select language\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        language\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Select language code.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            setLanguage(&#39;es&#39;)--&gt; Spanish language\nsetLanguage(&#39;ca&#39;)--&gt; Catala language\n                                        \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            setUnitMetric\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setUnitMetric(unit: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/api/config.service.ts:9\n                            \n                        \n\n\n                \n                    \n                            Manage to return metric or standard metric values\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Metric unit to return value in temperature with celsius or kelvin\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     \"&units=metric\" | \"\"\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AVAILABLE_LANGS } from './../../../constants/languages';\nimport axios from 'axios';\n\nexport class ConfigService {\n    /**\n     * Manage to return metric or standard metric values\n     * @param unit Metric unit to return value in temperature with celsius or kelvin\n     */\n    public static setUnitMetric(unit: string) {\n        if (unit === 'm' || unit === 'metres') {\n            return `&units=metric`;\n        }\n        return ``;\n    }\n\n    /**\n     * Define default language use to show description in select language\n     * @example\n     * setLanguage('es')--> Spanish language\n     * setLanguage('ca')--> Catala language\n     * @param language { string } Select language code.\n     */\n    public static setLanguage(language: string) {\n        \n        if (language === '' || AVAILABLE_LANGS.find( (lang: any) => lang === language ) === undefined) {\n            return ``;\n        }\n        return `&lang=${language}`;\n    }\n\n    /**\n     * Add headers in JSON Format\n     * @param json \n     */\n    public static setJsonFormat() {\n        axios.defaults.headers.get['Content-Type'] = 'application/json';\n    }\n\n    public static options(jsonValue: boolean = true) {\n        /*\n        qs: {\n                access_token: 'xxxxx xxxxx' // -> uri + '?access_token=xxxxx%20xxxxx'\n            },\n        headers: {\n                'User-Agent': 'Rx-Http-Request'\n            },*/\n        const options = {\n            json: jsonValue // Automatically parses the JSON string in the response\n        };\n        return options;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Coord.html":{"url":"interfaces/Coord.html","title":"interface - Coord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/api.interface.ts\n        \n\n            \n                Description\n            \n            \n                Location coordinates interface with lon and lat properties\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lat\n                                \n                                \n                                        lon\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                    \n                                \n                                \n                                    \n                                        lat:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lon\n                                    \n                                \n                                \n                                    \n                                        lon:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Coord {\n    lon: number;\n    lat: number;\n}\n\n/**\n * Take weather information properties definition\n */\nexport interface Weather {\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n}\n\nexport interface Main {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n}\n\nexport interface Wind {\n    speed: number;\n    deg: number;\n}\n\nexport interface Clouds {\n    all: number;\n}\n\nexport interface Sys {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n}\n\nexport interface Result {\n    coord: Coord;\n    weather: Weather[];\n    base: string;\n    main: Main;\n    visibility: number;\n    wind: Wind;\n    clouds: Clouds;\n    dt: number;\n    sys: Sys;\n    id: number;\n    name: string;\n    cod: number;\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CurrentService.html":{"url":"classes/CurrentService.html","title":"class - CurrentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CurrentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/weather/current.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiKey\n                            \n                            \n                                    Private\n                                language\n                            \n                            \n                                    Private\n                                unitMetric\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getByCity\n                            \n                            \n                                    Async\n                                getByLocation\n                            \n                            \n                                    Async\n                                getByZip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apiKey: string, unitMetric: string, lang: string)\n                    \n                \n                        \n                            \n                                Defined in lib/classes/services/weather/current.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unitMetric\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lang\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            apiKey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        apiKey:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            language\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        language:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unitMetric\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unitMetric:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByCity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByCity(city: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:23\n                            \n                        \n\n\n                \n                    \n                            Take current weather of select city and country.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ''\n                                                        \n\n                                                        \n                                                                add select city.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            getByCity(&#39;Madrid,es&#39;) --&gt; Madrid (Spain) current weather Data.\ngetByCity(&#39;Barcelona&#39;) --&gt; Find Barcelona (Spain)\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByLocation\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByLocation(location: Location)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:46\n                            \n                        \n\n\n                \n                    \n                            Take current weather data in select place to add coordinates\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                        \n                                                                    Location\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                Add location coordinates in {lat: number, lng: number } format\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            location = {lat: 36.1699412, lng: -115.13982959999998} - Las Vegas\nlocation = {lat: 41.9027835, lng: 12.496365500000024} - Roma\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getByZip\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getByZip(zipCode: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/classes/services/weather/current.service.ts:62\n                            \n                        \n\n\n                \n                    \n                            Input select city zip code to take this select weather current data.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        zipCode\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \"-1\"\n                                                        \n\n                                                        \n                                                                location zip code add. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                                    Example :\n                                        \n                                            Las Vegas = 48104\nBarcelona = 08026\nBilbao = 48002\n                                        \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from './../api/config.service';\nimport { Location } from './../../interfaces/location.interface';\nimport { API_URL } from '../../../constants/environments';\nimport axios from 'axios';\n\nexport class CurrentService {\n    private apiKey: string;\n    private unitMetric: string;\n    private language: string;\n    constructor(apiKey: string, unitMetric: string = 'm', lang: string = 'en') {\n        this.apiKey = apiKey;\n        this.unitMetric = ConfigService.setUnitMetric(unitMetric);\n        this.language = ConfigService.setLanguage(lang);\n    }\n    \n    /**\n    * Take current weather of select city and country.\n    * @example\n    * getByCity('Madrid,es') --> Madrid (Spain) current weather Data.\n    * getByCity('Barcelona') --> Find Barcelona (Spain)\n    * @param city { string} add select city.\n    */\n    async getByCity(city: string = '') {\n        \n        let findValue = '';\n        if (city === null || city === undefined || city === '') {\n            findValue = 'q=London,uk';\n        } else {\n            findValue = `q=${city}`;\n        }\n        const URL = `${API_URL }weather?${findValue}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        // return RxHR.get(URL, ConfigService.options(jsonFormat));\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n                                            \n    }\n\n    /**\n     * Take current weather data in select place to add coordinates\n     * @example \n     * location = {lat: 36.1699412, lng: -115.13982959999998} - Las Vegas\n     * location = {lat: 41.9027835, lng: 12.496365500000024} - Roma\n     * @param location {Location} Add location coordinates in {lat: number, lng: number } format\n     */\n    async getByLocation(location: Location) {\n        const value = `lat=${location.lat}&lon=${location.lon}`;\n        const URL = `${API_URL }weather?${value}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n    }\n\n    /**\n     * Input select city zip code to take this select weather current data.\n     * @example\n     * Las Vegas = 48104\n     * Barcelona = 08026\n     * Bilbao = 48002\n     * @param zipCode { string } location zip code add. \n     */\n    async getByZip(zipCode: string = \"-1\") {\n        const URL = `${API_URL }weather?zip=${zipCode}${this.unitMetric}${this.language}&appid=${ this.apiKey }`\n        return axios.get(URL).then(\n            data => { return data.data; }\n        );\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Forecast.html":{"url":"classes/Forecast.html","title":"class - Forecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Forecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/services/weather/forecast.service.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        class Forecast {\n    \n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ListData.html":{"url":"interfaces/ListData.html","title":"interface - ListData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ListData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/list.interface.ts\n        \n\n            \n                Description\n            \n            \n                Interface definition to obtain more weather data\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        last_update\n                                \n                                \n                                        list\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        last_update\n                                    \n                                \n                                \n                                    \n                                        last_update:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        list\n                                    \n                                \n                                \n                                    \n                                        list:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ListData {\n    list: any;\n    last_update: string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Location.html":{"url":"interfaces/Location.html","title":"interface - Location","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Location\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/location.interface.ts\n        \n\n            \n                Description\n            \n            \n                Location coordinates interface with lon and lat properties\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lat\n                                \n                                \n                                        lon\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                    \n                                \n                                \n                                    \n                                        lat:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lon\n                                    \n                                \n                                \n                                    \n                                        lon:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Location {\n    lat: number;\n    lon: number;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Main.html":{"url":"interfaces/Main.html","title":"interface - Main","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Main\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/api.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        humidity\n                                \n                                \n                                        pressure\n                                \n                                \n                                        temp\n                                \n                                \n                                        temp_max\n                                \n                                \n                                        temp_min\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        humidity\n                                    \n                                \n                                \n                                    \n                                        humidity:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pressure\n                                    \n                                \n                                \n                                    \n                                        pressure:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        temp\n                                    \n                                \n                                \n                                    \n                                        temp:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        temp_max\n                                    \n                                \n                                \n                                    \n                                        temp_max:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        temp_min\n                                    \n                                \n                                \n                                    \n                                        temp_min:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Coord {\n    lon: number;\n    lat: number;\n}\n\n/**\n * Take weather information properties definition\n */\nexport interface Weather {\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n}\n\nexport interface Main {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n}\n\nexport interface Wind {\n    speed: number;\n    deg: number;\n}\n\nexport interface Clouds {\n    all: number;\n}\n\nexport interface Sys {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n}\n\nexport interface Result {\n    coord: Coord;\n    weather: Weather[];\n    base: string;\n    main: Main;\n    visibility: number;\n    wind: Wind;\n    clouds: Clouds;\n    dt: number;\n    sys: Sys;\n    id: number;\n    name: string;\n    cod: number;\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Result.html":{"url":"interfaces/Result.html","title":"interface - Result","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Result\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/api.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        base\n                                \n                                \n                                        clouds\n                                \n                                \n                                        cod\n                                \n                                \n                                        coord\n                                \n                                \n                                        dt\n                                \n                                \n                                        id\n                                \n                                \n                                        main\n                                \n                                \n                                        name\n                                \n                                \n                                        sys\n                                \n                                \n                                        visibility\n                                \n                                \n                                        weather\n                                \n                                \n                                        wind\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        base\n                                    \n                                \n                                \n                                    \n                                        base:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clouds\n                                    \n                                \n                                \n                                    \n                                        clouds:     Clouds\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Clouds\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cod\n                                    \n                                \n                                \n                                    \n                                        cod:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        coord\n                                    \n                                \n                                \n                                    \n                                        coord:     Coord\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Coord\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dt\n                                    \n                                \n                                \n                                    \n                                        dt:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        main\n                                    \n                                \n                                \n                                    \n                                        main:     Main\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Main\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sys\n                                    \n                                \n                                \n                                    \n                                        sys:     Sys\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Sys\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visibility\n                                    \n                                \n                                \n                                    \n                                        visibility:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weather\n                                    \n                                \n                                \n                                    \n                                        weather:     Weather[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Weather[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wind\n                                    \n                                \n                                \n                                    \n                                        wind:     Wind\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Wind\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Coord {\n    lon: number;\n    lat: number;\n}\n\n/**\n * Take weather information properties definition\n */\nexport interface Weather {\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n}\n\nexport interface Main {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n}\n\nexport interface Wind {\n    speed: number;\n    deg: number;\n}\n\nexport interface Clouds {\n    all: number;\n}\n\nexport interface Sys {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n}\n\nexport interface Result {\n    coord: Coord;\n    weather: Weather[];\n    base: string;\n    main: Main;\n    visibility: number;\n    wind: Wind;\n    clouds: Clouds;\n    dt: number;\n    sys: Sys;\n    id: number;\n    name: string;\n    cod: number;\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sys.html":{"url":"interfaces/Sys.html","title":"interface - Sys","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sys\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/api.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        country\n                                \n                                \n                                        id\n                                \n                                \n                                        message\n                                \n                                \n                                        sunrise\n                                \n                                \n                                        sunset\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sunrise\n                                    \n                                \n                                \n                                    \n                                        sunrise:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sunset\n                                    \n                                \n                                \n                                    \n                                        sunset:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Coord {\n    lon: number;\n    lat: number;\n}\n\n/**\n * Take weather information properties definition\n */\nexport interface Weather {\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n}\n\nexport interface Main {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n}\n\nexport interface Wind {\n    speed: number;\n    deg: number;\n}\n\nexport interface Clouds {\n    all: number;\n}\n\nexport interface Sys {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n}\n\nexport interface Result {\n    coord: Coord;\n    weather: Weather[];\n    base: string;\n    main: Main;\n    visibility: number;\n    wind: Wind;\n    clouds: Clouds;\n    dt: number;\n    sys: Sys;\n    id: number;\n    name: string;\n    cod: number;\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Weather.html":{"url":"interfaces/Weather.html","title":"interface - Weather","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Weather\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/api.interface.ts\n        \n\n            \n                Description\n            \n            \n                Take weather information properties definition\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        icon\n                                \n                                \n                                        id\n                                \n                                \n                                        main\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        main\n                                    \n                                \n                                \n                                    \n                                        main:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Coord {\n    lon: number;\n    lat: number;\n}\n\n/**\n * Take weather information properties definition\n */\nexport interface Weather {\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n}\n\nexport interface Main {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n}\n\nexport interface Wind {\n    speed: number;\n    deg: number;\n}\n\nexport interface Clouds {\n    all: number;\n}\n\nexport interface Sys {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n}\n\nexport interface Result {\n    coord: Coord;\n    weather: Weather[];\n    base: string;\n    main: Main;\n    visibility: number;\n    wind: Wind;\n    clouds: Clouds;\n    dt: number;\n    sys: Sys;\n    id: number;\n    name: string;\n    cod: number;\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Wind.html":{"url":"interfaces/Wind.html","title":"interface - Wind","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Wind\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/classes/interfaces/api.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        deg\n                                \n                                \n                                        speed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deg\n                                    \n                                \n                                \n                                    \n                                        deg:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        speed\n                                    \n                                \n                                \n                                    \n                                        speed:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Coord {\n    lon: number;\n    lat: number;\n}\n\n/**\n * Take weather information properties definition\n */\nexport interface Weather {\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n}\n\nexport interface Main {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n}\n\nexport interface Wind {\n    speed: number;\n    deg: number;\n}\n\nexport interface Clouds {\n    all: number;\n}\n\nexport interface Sys {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n}\n\nexport interface Result {\n    coord: Coord;\n    weather: Weather[];\n    base: string;\n    main: Main;\n    visibility: number;\n    wind: Wind;\n    clouds: Clouds;\n    dt: number;\n    sys: Sys;\n    id: number;\n    name: string;\n    cod: number;\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                check.ts\n            \n            \n                variable\n            \n            \n                api\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/api.interface.ts\n            \n            \n                interface\n            \n            \n                Clouds\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/api.interface.ts\n            \n            \n                interface\n            \n            \n                Coord\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/api.interface.ts\n            \n            \n                interface\n            \n            \n                Main\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/api.interface.ts\n            \n            \n                interface\n            \n            \n                Result\n            \n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/api.interface.ts\n            \n            \n                interface\n            \n            \n                Sys\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/api.interface.ts\n            \n            \n                interface\n            \n            \n                Weather\n            \n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/api.interface.ts\n            \n            \n                interface\n            \n            \n                Wind\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/city.interface.ts\n            \n            \n                interface\n            \n            \n                City\n            \n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/list.interface.ts\n            \n            \n                interface\n            \n            \n                ListData\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/classes/interfaces/location.interface.ts\n            \n            \n                interface\n            \n            \n                Location\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/classes/services/api/api.service.ts\n            \n            \n                class\n            \n            \n                ApiService\n            \n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                lib/classes/services/api/config.service.ts\n            \n            \n                class\n            \n            \n                ConfigService\n            \n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                lib/classes/services/cities.service.ts\n            \n            \n                class\n            \n            \n                CitiesService\n            \n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                lib/classes/services/weather/current.service.ts\n            \n            \n                class\n            \n            \n                CurrentService\n            \n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                lib/classes/services/weather/forecast.service.ts\n            \n            \n                class\n            \n            \n                Forecast\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/constants/cities-list.ts\n            \n            \n                variable\n            \n            \n                CITIES_LIST\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/constants/environments.ts\n            \n            \n                variable\n            \n            \n                API_URL\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/constants/languages.ts\n            \n            \n                variable\n            \n            \n                AVAILABLE_LANGS\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            axios : ^0.18.0\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FindType   (lib/.../find-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/classes/enums/find-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FindType\n                    \n                \n                        \n                            \n                                 City\n                            \n                        \n                        \n                            \n                                Value : city\n                            \n                        \n                        \n                            \n                                 Location\n                            \n                        \n                        \n                            \n                                Value : location\n                            \n                        \n                        \n                            \n                                 Zip\n                            \n                        \n                        \n                            \n                                Value : zip\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOpenweather API (in working)\n \n\n\nAPI Openweather with basic request.\nFunctions\nCurrent Weather data.\n\nBy city name: Examples = ('Roma,it', 'Barcelona,es', 'Paris,fr', 'Bilbao,es' ,...)\nBy location: Example: {lat: 36.1699412, lng: -115.13982959999998} = Las Vegas\nBy zip code: Example: 89104 - Las Vegas\n\nForecast Weather data (Next 5 days in 3 hours period)\n\nPending to implement\n\nInstallation.\nnpm install @mugan86/openweather-apiGenerate DIST\nnpm run watchor\ntsc -wUsage\n\nRegister in Openweathermap.\nTake API key from: API Keys\nFollow this example. Basic example.\n\nImports\nTypescript\nimport { ApiService } from '@mugan86/openweather-api';\n\nconst api = new ApiService('YOUR_API_KEY', 'm', 'es');\nJavascript\nconst lib = require('@mugan86/openweather-api');\nconst apiService = lib.ApiService;\n\nconst api = new apiService('YOUR_API_KEY'); // unit metric = metres / lang = englishHow to use\napi.getCurrentWeather('city', ['Barcelona,es']).then(\n    (data) => {\n        console.log('***************** BARCELONA *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);\n\napi.getCurrentWeather('zip', ['89104']).then(\n    (data) => { \n        console.log('***************** LAS VEGAS *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);\n\napi.getCurrentWeather('location', [{lat: 36.1699412, lng: -115.13982959999998}]).then(\n    (data) => { \n        console.log('***************** LAS VEGAS *****************');\n        console.log(data)\n    },\n    (err) => console.error(err) // Show error in console);\n);Build your project with Webpack\nIf you want to include this library inside a project builds with webpack for a client application, you must add this configuration inside your webpack configuration:\n{\n    target: \"web\",\n    node: {\n        fs: \"empty\",\n        net: \"empty\",\n        tls: \"empty\"\n    }\n}Build your project with Webpack in Angular\nIf you want to include this library inside a project builds with webpack for a client application, you must add this configuration inside your webpack configuration. Go to node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs/browser.js\nGo to file end and replace:\n{\n    plugins: extraPlugins,\n    node: false\n}with \n{\n    plugins: extraPlugins,\n    target: \"web\",\n    node: {\n        fs: \"empty\",\n        net: \"empty\",\n        tls: \"empty\"\n    }\n}License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Npm Course: JS, TS and Angular\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    10 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            api   (check.ts)\n                        \n                        \n                            API_URL   (lib/.../environments.ts)\n                        \n                        \n                            AVAILABLE_LANGS   (lib/.../languages.ts)\n                        \n                        \n                            CITIES_LIST   (lib/.../cities-list.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    check.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            api\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        api:     \n\n                    \n                \n                    \n                        \n                            Default value : new ApiService('ec32f42ea9357dae4e8e8dbc6d0f77f9', 'm', 'es')\n                        \n                    \n\n\n            \n        \n\n    lib/constants/environments.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            API_URL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        API_URL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'https://api.openweathermap.org/data/2.5/'\n                        \n                    \n\n\n            \n        \n\n    lib/constants/languages.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AVAILABLE_LANGS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        AVAILABLE_LANGS:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'en', 'es', 'ca', 'it', 'fr'\n]\n                        \n                    \n\n\n            \n        \n\n    lib/constants/cities-list.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CITIES_LIST\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        CITIES_LIST:     ListData\n\n                    \n                \n                    \n                        \n                            Type :     ListData\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"list\": [\n        {\n            \"name\": \"Barcelona\",\n            \"country\": \"es\",\n            \"location\": {\n                \"lat\": 41.40340260589794    ,      \n                \"lng\": 2.186880111694336\n            },\n            \"zip\": \"08026\"\n        },\n        {\n            \"name\": \"Bilbao\",\n            \"country\": \"es\",\n            \"location\": {\n                \"lat\": 43.26    ,    \n                \"lng\": -2.94\n            },\n            \"zip\": \"48002\"\n        },\n        {\n            \"name\": \"Paris\",\n            \"country\": \"fr\",\n            \"location\": {\n                \"lat\": 48.856614    ,    \n                \"lng\": 2.3522219000000177\n            },\n            \"zip\": \"75006\"\n        },\n        {\n            \"name\": \"Roma\",\n            \"country\": \"uk\",\n            \"location\": {\n                \"lat\": 41.9027835    ,    \n                \"lng\": 12.496365500000024\n            },\n            \"zip\": -1\n        },\n        {\n            \"name\": \"Las Vegas\",\n            \"country\": \"us\",\n            \"location\": {\n                \"lat\": 36.1699412,     \n                \"lng\": -115.13982959999998\n            },\n            \"zip\": -1\n        }\n    ],\n    \"last_update\": \"2018-11-26\"\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
